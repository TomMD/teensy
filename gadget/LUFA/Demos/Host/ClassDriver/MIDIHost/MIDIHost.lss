
MIDIHost.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  000019b2  00001a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  008001d2  008001d2  00001b18  2**0
                  ALLOC
  3 .stab         000022e0  00000000  00000000  00001b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000de9  00000000  00000000  00003df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000002d0  00000000  00000000  00004be1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000666  00000000  00000000  00004eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002df1  00000000  00000000  00005517  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000fcb  00000000  00000000  00008308  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029b3  00000000  00000000  000092d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000420  00000000  00000000  0000bc88  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001902  00000000  00000000  0000c0a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000184e  00000000  00000000  0000d9aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000002e8  00000000  00000000  0000f1f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	
	return USB_Host_SendControlRequest(DeviceDescriptorPtr);
}

uint8_t USB_Host_ClearPipeStall(uint8_t EndpointNum)
{
       0:	cd c0       	rjmp	.+410    	; 0x19c <__ctors_end>
uint8_t Pipe_Discard_Stream(uint16_t Length
#if !defined(NO_STREAM_CALLBACKS)
                                 , StreamCallbackPtr_t Callback
#endif
								 )
{
       2:	00 00       	nop
{
	USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, AfterType);
	
	if (*BytesRem)
	  USB_GetNextDescriptorOfType(BytesRem, CurrConfigLoc, Type);
}
       4:	e9 c0       	rjmp	.+466    	; 0x1d8 <__bad_interrupt>
       6:	00 00       	nop
       8:	e7 c0       	rjmp	.+462    	; 0x1d8 <__bad_interrupt>
       a:	00 00       	nop
       c:	e5 c0       	rjmp	.+458    	; 0x1d8 <__bad_interrupt>
       e:	00 00       	nop
      10:	e3 c0       	rjmp	.+454    	; 0x1d8 <__bad_interrupt>
      12:	00 00       	nop
      14:	e1 c0       	rjmp	.+450    	; 0x1d8 <__bad_interrupt>
      16:	00 00       	nop
      18:	df c0       	rjmp	.+446    	; 0x1d8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	dd c0       	rjmp	.+442    	; 0x1d8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	db c0       	rjmp	.+438    	; 0x1d8 <__bad_interrupt>
      22:	00 00       	nop
      24:	d9 c0       	rjmp	.+434    	; 0x1d8 <__bad_interrupt>
      26:	00 00       	nop
      28:	77 c7       	rjmp	.+3822   	; 0xf18 <__vector_10>
      2a:	00 00       	nop
      2c:	d5 c0       	rjmp	.+426    	; 0x1d8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	d3 c0       	rjmp	.+422    	; 0x1d8 <__bad_interrupt>
      32:	00 00       	nop
      34:	d1 c0       	rjmp	.+418    	; 0x1d8 <__bad_interrupt>
      36:	00 00       	nop
      38:	cf c0       	rjmp	.+414    	; 0x1d8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	cd c0       	rjmp	.+410    	; 0x1d8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	cb c0       	rjmp	.+406    	; 0x1d8 <__bad_interrupt>
      42:	00 00       	nop
      44:	c9 c0       	rjmp	.+402    	; 0x1d8 <__bad_interrupt>
      46:	00 00       	nop
      48:	c7 c0       	rjmp	.+398    	; 0x1d8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	c5 c0       	rjmp	.+394    	; 0x1d8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	c3 c0       	rjmp	.+390    	; 0x1d8 <__bad_interrupt>
      52:	00 00       	nop
      54:	c1 c0       	rjmp	.+386    	; 0x1d8 <__bad_interrupt>
      56:	00 00       	nop
      58:	bf c0       	rjmp	.+382    	; 0x1d8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	bd c0       	rjmp	.+378    	; 0x1d8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	bb c0       	rjmp	.+374    	; 0x1d8 <__bad_interrupt>
      62:	00 00       	nop
      64:	b9 c0       	rjmp	.+370    	; 0x1d8 <__bad_interrupt>
      66:	00 00       	nop
      68:	b7 c0       	rjmp	.+366    	; 0x1d8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	b5 c0       	rjmp	.+362    	; 0x1d8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	b3 c0       	rjmp	.+358    	; 0x1d8 <__bad_interrupt>
      72:	00 00       	nop
      74:	b1 c0       	rjmp	.+354    	; 0x1d8 <__bad_interrupt>
      76:	00 00       	nop
      78:	af c0       	rjmp	.+350    	; 0x1d8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	ad c0       	rjmp	.+346    	; 0x1d8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	ab c0       	rjmp	.+342    	; 0x1d8 <__bad_interrupt>
      82:	00 00       	nop
      84:	a9 c0       	rjmp	.+338    	; 0x1d8 <__bad_interrupt>
      86:	00 00       	nop
      88:	a7 c0       	rjmp	.+334    	; 0x1d8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a5 c0       	rjmp	.+330    	; 0x1d8 <__bad_interrupt>
      8e:	00 00       	nop
      90:	a3 c0       	rjmp	.+326    	; 0x1d8 <__bad_interrupt>
      92:	00 00       	nop
      94:	a1 c0       	rjmp	.+322    	; 0x1d8 <__bad_interrupt>
      96:	00 00       	nop

00000098 <__c.2786>:
      98:	1b 5b 33 31 6d 44 65 76 20 45 6e 75 6d 20 45 72     .[31mDev Enum Er
      a8:	72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20 43     ror.. -- Error C
      b8:	6f 64 65 20 25 64 0d 0a 20 2d 2d 20 53 75 62 20     ode %d.. -- Sub 
      c8:	45 72 72 6f 72 20 43 6f 64 65 20 25 64 0d 0a 20     Error Code %d.. 
      d8:	2d 2d 20 49 6e 20 53 74 61 74 65 20 25 64 0d 0a     -- In State %d..
      e8:	1b 5b 33 37 6d 00                                   .[37m.

000000ee <__c.2778>:
      ee:	1b 5b 33 31 6d 48 6f 73 74 20 4d 6f 64 65 20 45     .[31mHost Mode E
      fe:	72 72 6f 72 0d 0a 20 2d 2d 20 45 72 72 6f 72 20     rror.. -- Error 
     10e:	43 6f 64 65 20 25 64 0d 0a 1b 5b 33 37 6d 00        Code %d...[37m.

0000011d <__c.2770>:
     11d:	0d 0a 44 65 76 69 63 65 20 55 6e 61 74 74 61 63     ..Device Unattac
     12d:	68 65 64 2e 0d 0a 00                                hed....

00000134 <__c.2765>:
     134:	44 65 76 69 63 65 20 41 74 74 61 63 68 65 64 2e     Device Attached.
     144:	0d 0a 00                                            ...

00000147 <__c.2650>:
     147:	4d 49 44 49 20 4e 6f 74 65 20 25 73 20 2d 20 43     MIDI Note %s - C
     157:	68 61 6e 6e 65 6c 20 25 64 2c 20 50 69 74 63 68     hannel %d, Pitch
     167:	20 25 64 2c 20 56 65 6c 6f 63 69 74 79 20 25 64      %d, Velocity %d
     177:	00                                                  .

00000178 <__c.2640>:
     178:	1b 5b 33 36 6d 4d 49 44 49 20 48 6f 73 74 20 44     .[36mMIDI Host D
     188:	65 6d 6f 20 72 75 6e 6e 69 6e 67 2e 0d 0a 1b 5b     emo running....[
     198:	33 37 6d 00                                         37m.

0000019c <__ctors_end>:
     19c:	11 24       	eor	r1, r1
     19e:	1f be       	out	0x3f, r1	; 63
     1a0:	cf ef       	ldi	r28, 0xFF	; 255
     1a2:	d0 e2       	ldi	r29, 0x20	; 32
     1a4:	de bf       	out	0x3e, r29	; 62
     1a6:	cd bf       	out	0x3d, r28	; 61

000001a8 <__do_copy_data>:
     1a8:	11 e0       	ldi	r17, 0x01	; 1
     1aa:	a0 e0       	ldi	r26, 0x00	; 0
     1ac:	b1 e0       	ldi	r27, 0x01	; 1
     1ae:	e2 eb       	ldi	r30, 0xB2	; 178
     1b0:	f9 e1       	ldi	r31, 0x19	; 25
     1b2:	00 e0       	ldi	r16, 0x00	; 0
     1b4:	0b bf       	out	0x3b, r16	; 59
     1b6:	02 c0       	rjmp	.+4      	; 0x1bc <__do_copy_data+0x14>
     1b8:	07 90       	elpm	r0, Z+
     1ba:	0d 92       	st	X+, r0
     1bc:	a2 3d       	cpi	r26, 0xD2	; 210
     1be:	b1 07       	cpc	r27, r17
     1c0:	d9 f7       	brne	.-10     	; 0x1b8 <__do_copy_data+0x10>

000001c2 <__do_clear_bss>:
     1c2:	11 e0       	ldi	r17, 0x01	; 1
     1c4:	a2 ed       	ldi	r26, 0xD2	; 210
     1c6:	b1 e0       	ldi	r27, 0x01	; 1
     1c8:	01 c0       	rjmp	.+2      	; 0x1cc <.do_clear_bss_start>

000001ca <.do_clear_bss_loop>:
     1ca:	1d 92       	st	X+, r1

000001cc <.do_clear_bss_start>:
     1cc:	a6 3e       	cpi	r26, 0xE6	; 230
     1ce:	b1 07       	cpc	r27, r17
     1d0:	e1 f7       	brne	.-8      	; 0x1ca <.do_clear_bss_loop>
     1d2:	0e d1       	rcall	.+540    	; 0x3f0 <main>
     1d4:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <_exit>

000001d8 <__bad_interrupt>:
     1d8:	13 cf       	rjmp	.-474    	; 0x0 <__vectors>

000001da <EVENT_USB_Host_DeviceEnumerationComplete>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     1da:	8b b1       	in	r24, 0x0b	; 11
     1dc:	8f 70       	andi	r24, 0x0F	; 15
     1de:	80 66       	ori	r24, 0x60	; 96
     1e0:	8b b9       	out	0x0b, r24	; 11
 *  enumerated by the host and is now ready to be used by the application.
 */
void EVENT_USB_Host_DeviceEnumerationComplete(void)
{
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}
     1e2:	08 95       	ret

000001e4 <EVENT_USB_Host_DeviceEnumerationFailed>:
/** Event handler for the USB_DeviceEnumerationFailed event. This indicates that a problem occurred while
 *  enumerating an attached USB device.
 */
void EVENT_USB_Host_DeviceEnumerationFailed(const uint8_t ErrorCode, const uint8_t SubErrorCode)
{
	printf_P(PSTR(ESC_FG_RED "Dev Enum Error\r\n"
     1e4:	90 91 df 01 	lds	r25, 0x01DF
     1e8:	2d b7       	in	r18, 0x3d	; 61
     1ea:	3e b7       	in	r19, 0x3e	; 62
     1ec:	28 50       	subi	r18, 0x08	; 8
     1ee:	30 40       	sbci	r19, 0x00	; 0
     1f0:	0f b6       	in	r0, 0x3f	; 63
     1f2:	f8 94       	cli
     1f4:	3e bf       	out	0x3e, r19	; 62
     1f6:	0f be       	out	0x3f, r0	; 63
     1f8:	2d bf       	out	0x3d, r18	; 61
     1fa:	ed b7       	in	r30, 0x3d	; 61
     1fc:	fe b7       	in	r31, 0x3e	; 62
     1fe:	31 96       	adiw	r30, 0x01	; 1
     200:	28 e9       	ldi	r18, 0x98	; 152
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	ad b7       	in	r26, 0x3d	; 61
     206:	be b7       	in	r27, 0x3e	; 62
     208:	12 96       	adiw	r26, 0x02	; 2
     20a:	3c 93       	st	X, r19
     20c:	2e 93       	st	-X, r18
     20e:	11 97       	sbiw	r26, 0x01	; 1
     210:	82 83       	std	Z+2, r24	; 0x02
     212:	13 82       	std	Z+3, r1	; 0x03
     214:	64 83       	std	Z+4, r22	; 0x04
     216:	15 82       	std	Z+5, r1	; 0x05
     218:	96 83       	std	Z+6, r25	; 0x06
     21a:	17 82       	std	Z+7, r1	; 0x07
     21c:	0e 94 af 09 	call	0x135e	; 0x135e <printf_P>
     220:	8b b1       	in	r24, 0x0b	; 11
     222:	8f 70       	andi	r24, 0x0F	; 15
     224:	80 69       	ori	r24, 0x90	; 144
     226:	8b b9       	out	0x0b, r24	; 11
     228:	2d b7       	in	r18, 0x3d	; 61
     22a:	3e b7       	in	r19, 0x3e	; 62
     22c:	28 5f       	subi	r18, 0xF8	; 248
     22e:	3f 4f       	sbci	r19, 0xFF	; 255
     230:	0f b6       	in	r0, 0x3f	; 63
     232:	f8 94       	cli
     234:	3e bf       	out	0x3e, r19	; 62
     236:	0f be       	out	0x3f, r0	; 63
     238:	2d bf       	out	0x3d, r18	; 61
	                         " -- Error Code %d\r\n"
	                         " -- Sub Error Code %d\r\n"
	                         " -- In State %d\r\n" ESC_FG_WHITE), ErrorCode, SubErrorCode, USB_HostState);
	
	LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
}
     23a:	08 95       	ret

0000023c <EVENT_USB_Host_HostError>:
	LEDs_SetAllLEDs(LEDMASK_USB_READY);
}

/** Event handler for the USB_HostError event. This indicates that a hardware error occurred while in host mode. */
void EVENT_USB_Host_HostError(const uint8_t ErrorCode)
{
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	0f 92       	push	r0
     242:	cd b7       	in	r28, 0x3d	; 61
     244:	de b7       	in	r29, 0x3e	; 62
	USB_ShutDown();
     246:	89 83       	std	Y+1, r24	; 0x01
     248:	d7 d4       	rcall	.+2478   	; 0xbf8 <USB_ShutDown>

	printf_P(PSTR(ESC_FG_RED "Host Mode Error\r\n"
     24a:	00 d0       	rcall	.+0      	; 0x24c <EVENT_USB_Host_HostError+0x10>
     24c:	00 d0       	rcall	.+0      	; 0x24e <EVENT_USB_Host_HostError+0x12>
     24e:	ed b7       	in	r30, 0x3d	; 61
     250:	fe b7       	in	r31, 0x3e	; 62
     252:	31 96       	adiw	r30, 0x01	; 1
     254:	2e ee       	ldi	r18, 0xEE	; 238
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	ad b7       	in	r26, 0x3d	; 61
     25a:	be b7       	in	r27, 0x3e	; 62
     25c:	12 96       	adiw	r26, 0x02	; 2
     25e:	3c 93       	st	X, r19
     260:	2e 93       	st	-X, r18
     262:	11 97       	sbiw	r26, 0x01	; 1
     264:	89 81       	ldd	r24, Y+1	; 0x01
     266:	82 83       	std	Z+2, r24	; 0x02
     268:	13 82       	std	Z+3, r1	; 0x03
     26a:	0e 94 af 09 	call	0x135e	; 0x135e <printf_P>
     26e:	8b b1       	in	r24, 0x0b	; 11
     270:	8f 70       	andi	r24, 0x0F	; 15
     272:	80 69       	ori	r24, 0x90	; 144
     274:	8b b9       	out	0x0b, r24	; 11
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	0f 90       	pop	r0
     27e:	ff cf       	rjmp	.-2      	; 0x27e <EVENT_USB_Host_HostError+0x42>

00000280 <EVENT_USB_Host_DeviceUnattached>:
/** Event handler for the USB_DeviceUnattached event. This indicates that a device has been removed from the host, and
 *  stops the library USB task management process.
 */
void EVENT_USB_Host_DeviceUnattached(void)
{
	puts_P(PSTR("\r\nDevice Unattached.\r\n"));
     280:	8d e1       	ldi	r24, 0x1D	; 29
     282:	91 e0       	ldi	r25, 0x01	; 1
     284:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     288:	8b b1       	in	r24, 0x0b	; 11
     28a:	8f 70       	andi	r24, 0x0F	; 15
     28c:	80 61       	ori	r24, 0x10	; 16
     28e:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     290:	08 95       	ret

00000292 <EVENT_USB_Host_DeviceAttached>:
/** Event handler for the USB_DeviceAttached event. This indicates that a device has been attached to the host, and
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Host_DeviceAttached(void)
{
	puts_P(PSTR("Device Attached.\r\n"));
     292:	84 e3       	ldi	r24, 0x34	; 52
     294:	91 e0       	ldi	r25, 0x01	; 1
     296:	0e 94 09 0a 	call	0x1412	; 0x1412 <puts_P>
     29a:	8b b1       	in	r24, 0x0b	; 11
     29c:	8f 70       	andi	r24, 0x0F	; 15
     29e:	80 6a       	ori	r24, 0xA0	; 160
     2a0:	8b b9       	out	0x0b, r24	; 11
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
}
     2a2:	08 95       	ret

000002a4 <CheckJoystickMovement>:
	Joystick_Init();
	USB_Init();
}

void CheckJoystickMovement(void)
{
     2a4:	1f 93       	push	r17
     2a6:	df 93       	push	r29
     2a8:	cf 93       	push	r28
     2aa:	00 d0       	rcall	.+0      	; 0x2ac <CheckJoystickMovement+0x8>
     2ac:	00 d0       	rcall	.+0      	; 0x2ae <CheckJoystickMovement+0xa>
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
			};
			
			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> 1));
     2b2:	13 b1       	in	r17, 0x03	; 3
     2b4:	8c b1       	in	r24, 0x0c	; 12
     2b6:	80 95       	com	r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	80 73       	andi	r24, 0x30	; 48
     2bc:	90 70       	andi	r25, 0x00	; 0
     2be:	95 95       	asr	r25
     2c0:	87 95       	ror	r24
     2c2:	10 95       	com	r17
     2c4:	10 7e       	andi	r17, 0xE0	; 224
     2c6:	18 2b       	or	r17, r24
	uint8_t MIDICommand = 0;
	uint8_t MIDIPitch;
	
	/* Get current joystick mask, XOR with previous to detect joystick changes */
	uint8_t JoystickStatus  = Joystick_GetStatus();
	uint8_t JoystickChanges = (JoystickStatus ^ PrevJoystickStatus);
     2c8:	90 91 d2 01 	lds	r25, 0x01D2
     2cc:	91 27       	eor	r25, r17
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
     2ce:	8c b1       	in	r24, 0x0c	; 12
		
	/* Get board button status - if pressed use channel 10 (percussion), otherwise use channel 1 */
	uint8_t Channel = ((Buttons_GetStatus() & BUTTONS_BUTTON1) ? MIDI_CHANNEL(10) : MIDI_CHANNEL(1));
     2d0:	80 95       	com	r24
     2d2:	84 70       	andi	r24, 0x04	; 4
     2d4:	11 f4       	brne	.+4      	; 0x2da <CheckJoystickMovement+0x36>
     2d6:	30 e0       	ldi	r19, 0x00	; 0
     2d8:	01 c0       	rjmp	.+2      	; 0x2dc <CheckJoystickMovement+0x38>
     2da:	39 e0       	ldi	r19, 0x09	; 9

	if (JoystickChanges & JOY_LEFT)
     2dc:	29 2f       	mov	r18, r25
     2de:	96 fd       	sbrc	r25, 6
     2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <CheckJoystickMovement+0x42>
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <CheckJoystickMovement+0x4c>
	{
		MIDICommand = ((JoystickStatus & JOY_LEFT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2e6:	16 fd       	sbrc	r17, 6
     2e8:	02 c0       	rjmp	.+4      	; 0x2ee <CheckJoystickMovement+0x4a>
     2ea:	80 e8       	ldi	r24, 0x80	; 128
     2ec:	01 c0       	rjmp	.+2      	; 0x2f0 <CheckJoystickMovement+0x4c>
     2ee:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3C;
	}

	if (JoystickChanges & JOY_UP)
     2f0:	97 fd       	sbrc	r25, 7
     2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <CheckJoystickMovement+0x54>
     2f4:	9c e3       	ldi	r25, 0x3C	; 60
     2f6:	07 c0       	rjmp	.+14     	; 0x306 <CheckJoystickMovement+0x62>
	{
		MIDICommand = ((JoystickStatus & JOY_UP)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     2f8:	17 fd       	sbrc	r17, 7
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <CheckJoystickMovement+0x5e>
     2fc:	9d e3       	ldi	r25, 0x3D	; 61
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	02 c0       	rjmp	.+4      	; 0x306 <CheckJoystickMovement+0x62>
     302:	9d e3       	ldi	r25, 0x3D	; 61
     304:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3D;
	}

	if (JoystickChanges & JOY_RIGHT)
     306:	23 ff       	sbrs	r18, 3
     308:	07 c0       	rjmp	.+14     	; 0x318 <CheckJoystickMovement+0x74>
	{
		MIDICommand = ((JoystickStatus & JOY_RIGHT)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     30a:	13 fd       	sbrc	r17, 3
     30c:	03 c0       	rjmp	.+6      	; 0x314 <CheckJoystickMovement+0x70>
     30e:	9e e3       	ldi	r25, 0x3E	; 62
     310:	80 e8       	ldi	r24, 0x80	; 128
     312:	02 c0       	rjmp	.+4      	; 0x318 <CheckJoystickMovement+0x74>
     314:	9e e3       	ldi	r25, 0x3E	; 62
     316:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3E;
	}
	
	if (JoystickChanges & JOY_DOWN)
     318:	24 ff       	sbrs	r18, 4
     31a:	07 c0       	rjmp	.+14     	; 0x32a <CheckJoystickMovement+0x86>
	{
		MIDICommand = ((JoystickStatus & JOY_DOWN)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     31c:	14 fd       	sbrc	r17, 4
     31e:	03 c0       	rjmp	.+6      	; 0x326 <CheckJoystickMovement+0x82>
     320:	9f e3       	ldi	r25, 0x3F	; 63
     322:	80 e8       	ldi	r24, 0x80	; 128
     324:	02 c0       	rjmp	.+4      	; 0x32a <CheckJoystickMovement+0x86>
     326:	9f e3       	ldi	r25, 0x3F	; 63
     328:	80 e9       	ldi	r24, 0x90	; 144
		MIDIPitch   = 0x3F;
	}

	if (JoystickChanges & JOY_PRESS)
     32a:	25 ff       	sbrs	r18, 5
     32c:	04 c0       	rjmp	.+8      	; 0x336 <CheckJoystickMovement+0x92>
	{
		MIDICommand = ((JoystickStatus & JOY_PRESS)? MIDI_COMMAND_NOTE_ON : MIDI_COMMAND_NOTE_OFF);
     32e:	15 ff       	sbrs	r17, 5
     330:	1d c0       	rjmp	.+58     	; 0x36c <CheckJoystickMovement+0xc8>
     332:	80 e9       	ldi	r24, 0x90	; 144
     334:	1c c0       	rjmp	.+56     	; 0x36e <CheckJoystickMovement+0xca>
		MIDIPitch   = 0x3B;
	}
	
	if (MIDICommand)
     336:	88 23       	and	r24, r24
     338:	79 f0       	breq	.+30     	; 0x358 <CheckJoystickMovement+0xb4>
				.Command     = (MIDICommand >> 4),
				
				.Data1       = MIDICommand | Channel,
				.Data2       = MIDIPitch,
				.Data3       = MIDI_STANDARD_VELOCITY,			
			};
     33a:	28 2f       	mov	r18, r24
     33c:	22 95       	swap	r18
     33e:	2f 70       	andi	r18, 0x0F	; 15
     340:	29 83       	std	Y+1, r18	; 0x01
     342:	83 2b       	or	r24, r19
     344:	8a 83       	std	Y+2, r24	; 0x02
     346:	9b 83       	std	Y+3, r25	; 0x03
     348:	80 e4       	ldi	r24, 0x40	; 64
     34a:	8c 83       	std	Y+4, r24	; 0x04
			
		MIDI_Host_SendEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent);
     34c:	81 ea       	ldi	r24, 0xA1	; 161
     34e:	91 e0       	ldi	r25, 0x01	; 1
     350:	be 01       	movw	r22, r28
     352:	6f 5f       	subi	r22, 0xFF	; 255
     354:	7f 4f       	sbci	r23, 0xFF	; 255
     356:	39 d7       	rcall	.+3698   	; 0x11ca <MIDI_Host_SendEventPacket>
	}

	PrevJoystickStatus = JoystickStatus;
     358:	10 93 d2 01 	sts	0x01D2, r17
}
     35c:	0f 90       	pop	r0
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	cf 91       	pop	r28
     366:	df 91       	pop	r29
     368:	1f 91       	pop	r17
     36a:	08 95       	ret
     36c:	80 e8       	ldi	r24, 0x80	; 128
     36e:	9b e3       	ldi	r25, 0x3B	; 59
     370:	e4 cf       	rjmp	.-56     	; 0x33a <CheckJoystickMovement+0x96>

00000372 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     372:	84 b7       	in	r24, 0x34	; 52
     374:	87 7f       	andi	r24, 0xF7	; 247
     376:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     378:	88 e1       	ldi	r24, 0x18	; 24
     37a:	0f b6       	in	r0, 0x3f	; 63
     37c:	f8 94       	cli
     37e:	80 93 60 00 	sts	0x0060, r24
     382:	10 92 60 00 	sts	0x0060, r1
     386:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     388:	20 e0       	ldi	r18, 0x00	; 0
     38a:	30 e0       	ldi	r19, 0x00	; 0
     38c:	90 e8       	ldi	r25, 0x80	; 128
     38e:	0f b6       	in	r0, 0x3f	; 63
     390:	f8 94       	cli
     392:	90 93 61 00 	sts	0x0061, r25
     396:	20 93 61 00 	sts	0x0061, r18
     39a:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] BaudRate     Serial baud rate, in bits per second
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate
			 */
			static inline void Serial_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     39c:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     3a0:	80 93 c9 00 	sts	0x00C9, r24
				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     3a4:	86 e0       	ldi	r24, 0x06	; 6
     3a6:	80 93 ca 00 	sts	0x00CA, r24
				
				DDRD  |= (1 << 3);	
     3aa:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     3ac:	5a 9a       	sbi	0x0b, 2	; 11
				
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     3ae:	83 e3       	ldi	r24, 0x33	; 51
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	90 93 cd 00 	sts	0x00CD, r25
     3b6:	80 93 cc 00 	sts	0x00CC, r24
			 */
			static inline void SerialStream_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);
				
				stdout = &USARTStream;
     3ba:	8a ea       	ldi	r24, 0xAA	; 170
     3bc:	91 e0       	ldi	r25, 0x01	; 1
     3be:	90 93 e3 01 	sts	0x01E3, r25
     3c2:	80 93 e2 01 	sts	0x01E2, r24

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
     3c6:	8a b1       	in	r24, 0x0a	; 10
     3c8:	80 6f       	ori	r24, 0xF0	; 240
     3ca:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
     3cc:	8b b1       	in	r24, 0x0b	; 11
     3ce:	8f 70       	andi	r24, 0x0F	; 15
     3d0:	8b b9       	out	0x0b, r24	; 11
	
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
     3d2:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
     3d4:	72 9a       	sbi	0x0e, 2	; 14
			
		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~(JOY_BMASK);
     3d6:	84 b1       	in	r24, 0x04	; 4
     3d8:	8f 71       	andi	r24, 0x1F	; 31
     3da:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~(JOY_EMASK);
     3dc:	8d b1       	in	r24, 0x0d	; 13
     3de:	8f 7c       	andi	r24, 0xCF	; 207
     3e0:	8d b9       	out	0x0d, r24	; 13

				PORTB |= JOY_BMASK;
     3e2:	85 b1       	in	r24, 0x05	; 5
     3e4:	80 6e       	ori	r24, 0xE0	; 224
     3e6:	85 b9       	out	0x05, r24	; 5
				PORTE |= JOY_EMASK;				
     3e8:	8e b1       	in	r24, 0x0e	; 14
     3ea:	80 63       	ori	r24, 0x30	; 48
     3ec:	8e b9       	out	0x0e, r24	; 14
	SerialStream_Init(9600, false);
	LEDs_Init();
	Buttons_Init();
	Joystick_Init();
	USB_Init();
}
     3ee:	16 c4       	rjmp	.+2092   	; 0xc1c <USB_Init>

000003f0 <main>:
	
/** Main program entry point. This routine configures the hardware required by the application, then
 *  enters a loop to run the application tasks in sequence.
 */
int main(void)
{
     3f0:	9f 92       	push	r9
     3f2:	af 92       	push	r10
     3f4:	bf 92       	push	r11
     3f6:	cf 92       	push	r12
     3f8:	df 92       	push	r13
     3fa:	ef 92       	push	r14
     3fc:	ff 92       	push	r15
     3fe:	0f 93       	push	r16
     400:	1f 93       	push	r17
     402:	df 93       	push	r29
     404:	cf 93       	push	r28
     406:	cd b7       	in	r28, 0x3d	; 61
     408:	de b7       	in	r29, 0x3e	; 62
     40a:	c6 50       	subi	r28, 0x06	; 6
     40c:	d2 40       	sbci	r29, 0x02	; 2
     40e:	0f b6       	in	r0, 0x3f	; 63
     410:	f8 94       	cli
     412:	de bf       	out	0x3e, r29	; 62
     414:	0f be       	out	0x3f, r0	; 63
     416:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
     418:	ac df       	rcall	.-168    	; 0x372 <SetupHardware>

	puts_P(PSTR(ESC_FG_CYAN "MIDI Host Demo running.\r\n" ESC_FG_WHITE));
     41a:	88 e7       	ldi	r24, 0x78	; 120
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	f9 d7       	rcall	.+4082   	; 0x1412 <puts_P>
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
     420:	8b b1       	in	r24, 0x0b	; 11
     422:	8f 70       	andi	r24, 0x0F	; 15
     424:	80 61       	ori	r24, 0x10	; 16
     426:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
			
				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     428:	8e 01       	movw	r16, r28
     42a:	09 5f       	subi	r16, 0xF9	; 249
     42c:	1f 4f       	sbci	r17, 0xFF	; 255
     42e:	7e 01       	movw	r14, r28
     430:	08 94       	sec
     432:	e1 1c       	adc	r14, r1
     434:	f1 1c       	adc	r15, r1
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}
				
				printf("MIDI Device Enumerated.\r\n");
				USB_HostState = HOST_STATE_Configured;
     436:	5c e0       	ldi	r21, 0x0C	; 12
     438:	95 2e       	mov	r9, r21
				break;
			case HOST_STATE_Configured:
				CheckJoystickMovement();
				
				MIDI_EventPacket_t MIDIEvent;
				if (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     43a:	43 e0       	ldi	r20, 0x03	; 3
     43c:	c4 2e       	mov	r12, r20
     43e:	d1 2c       	mov	r13, r1
     440:	cc 0e       	add	r12, r28
     442:	dd 1e       	adc	r13, r29
					bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
					bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));
					
					if (NoteOnEvent || NoteOffEvent)
					{
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d"), NoteOnEvent ? "On" : "Off",
     444:	37 e4       	ldi	r19, 0x47	; 71
     446:	a3 2e       	mov	r10, r19
     448:	31 e0       	ldi	r19, 0x01	; 1
     44a:	b3 2e       	mov	r11, r19

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);

	for (;;)
	{
		switch (USB_HostState)
     44c:	80 91 df 01 	lds	r24, 0x01DF
     450:	8b 30       	cpi	r24, 0x0B	; 11
     452:	21 f0       	breq	.+8      	; 0x45c <main+0x6c>
     454:	8c 30       	cpi	r24, 0x0C	; 12
     456:	09 f0       	breq	.+2      	; 0x45a <main+0x6a>
     458:	6f c0       	rjmp	.+222    	; 0x538 <main+0x148>
     45a:	2e c0       	rjmp	.+92     	; 0x4b8 <main+0xc8>
     45c:	8b b1       	in	r24, 0x0b	; 11
     45e:	8f 70       	andi	r24, 0x0F	; 15
     460:	80 6a       	ori	r24, 0xA0	; 160
     462:	8b b9       	out	0x0b, r24	; 11
				LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
			
				uint16_t ConfigDescriptorSize;
				uint8_t  ConfigDescriptorData[512];

				if (USB_Host_GetDeviceConfigDescriptor(1, &ConfigDescriptorSize, ConfigDescriptorData,
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	b7 01       	movw	r22, r14
     468:	a8 01       	movw	r20, r16
     46a:	20 e0       	ldi	r18, 0x00	; 0
     46c:	32 e0       	ldi	r19, 0x02	; 2
     46e:	23 d6       	rcall	.+3142   	; 0x10b6 <USB_Host_GetDeviceConfigDescriptor>
     470:	88 23       	and	r24, r24
     472:	19 f0       	breq	.+6      	; 0x47a <main+0x8a>
				                                       sizeof(ConfigDescriptorData)) != HOST_GETCONFIG_Successful)
				{
					printf("Error Retrieving Configuration Descriptor.\r\n");
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0a c0       	rjmp	.+20     	; 0x48e <main+0x9e>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}

				if (MIDI_Host_ConfigurePipes(&Keyboard_MIDI_Interface,
     47a:	69 81       	ldd	r22, Y+1	; 0x01
     47c:	7a 81       	ldd	r23, Y+2	; 0x02
     47e:	81 ea       	ldi	r24, 0xA1	; 161
     480:	91 e0       	ldi	r25, 0x01	; 1
     482:	a8 01       	movw	r20, r16
     484:	c3 d6       	rcall	.+3462   	; 0x120c <MIDI_Host_ConfigurePipes>
     486:	88 23       	and	r24, r24
     488:	51 f0       	breq	.+20     	; 0x49e <main+0xae>
				                             ConfigDescriptorSize, ConfigDescriptorData) != MIDI_ENUMERROR_NoError)
				{
					printf("Attached Device Not a Valid MIDI Class Device.\r\n");
     48a:	8c e2       	ldi	r24, 0x2C	; 44
     48c:	91 e0       	ldi	r25, 0x01	; 1
     48e:	86 d7       	rcall	.+3852   	; 0x139c <puts>
     490:	8b b1       	in	r24, 0x0b	; 11
     492:	8f 70       	andi	r24, 0x0F	; 15
     494:	80 69       	ori	r24, 0x90	; 144
     496:	8b b9       	out	0x0b, r24	; 11
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
     498:	10 92 df 01 	sts	0x01DF, r1
					break;
     49c:	4d c0       	rjmp	.+154    	; 0x538 <main+0x148>
				}
				
				if (USB_Host_SetDeviceConfiguration(1) != HOST_SENDCONTROL_Successful)
     49e:	81 e0       	ldi	r24, 0x01	; 1
     4a0:	d7 d0       	rcall	.+430    	; 0x650 <USB_Host_SetDeviceConfiguration>
     4a2:	88 23       	and	r24, r24
     4a4:	19 f0       	breq	.+6      	; 0x4ac <main+0xbc>
				{
					printf("Error Setting Device Configuration.\r\n");
     4a6:	8c e5       	ldi	r24, 0x5C	; 92
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	f1 cf       	rjmp	.-30     	; 0x48e <main+0x9e>
					LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
					USB_HostState = HOST_STATE_WaitForDeviceRemoval;
					break;
				}
				
				printf("MIDI Device Enumerated.\r\n");
     4ac:	81 e8       	ldi	r24, 0x81	; 129
     4ae:	91 e0       	ldi	r25, 0x01	; 1
     4b0:	75 d7       	rcall	.+3818   	; 0x139c <puts>
				USB_HostState = HOST_STATE_Configured;
     4b2:	90 92 df 01 	sts	0x01DF, r9
				break;
     4b6:	40 c0       	rjmp	.+128    	; 0x538 <main+0x148>
			case HOST_STATE_Configured:
				CheckJoystickMovement();
     4b8:	f5 de       	rcall	.-534    	; 0x2a4 <CheckJoystickMovement>
				
				MIDI_EventPacket_t MIDIEvent;
				if (MIDI_Host_ReceiveEventPacket(&Keyboard_MIDI_Interface, &MIDIEvent))
     4ba:	81 ea       	ldi	r24, 0xA1	; 161
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	b6 01       	movw	r22, r12
     4c0:	60 d6       	rcall	.+3264   	; 0x1182 <MIDI_Host_ReceiveEventPacket>
     4c2:	88 23       	and	r24, r24
     4c4:	c9 f1       	breq	.+114    	; 0x538 <main+0x148>
				{
					bool NoteOnEvent  = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_ON  >> 4));
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	8f 70       	andi	r24, 0x0F	; 15
     4ca:	90 e0       	ldi	r25, 0x00	; 0
					bool NoteOffEvent = ((MIDIEvent.Command & 0x0F) == (MIDI_COMMAND_NOTE_OFF >> 4));
					
					if (NoteOnEvent || NoteOffEvent)
     4cc:	89 30       	cpi	r24, 0x09	; 9
     4ce:	91 05       	cpc	r25, r1
     4d0:	19 f4       	brne	.+6      	; 0x4d8 <main+0xe8>
     4d2:	8a e9       	ldi	r24, 0x9A	; 154
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	05 c0       	rjmp	.+10     	; 0x4e2 <main+0xf2>
     4d8:	88 30       	cpi	r24, 0x08	; 8
     4da:	91 05       	cpc	r25, r1
     4dc:	69 f5       	brne	.+90     	; 0x538 <main+0x148>
     4de:	8d e9       	ldi	r24, 0x9D	; 157
     4e0:	91 e0       	ldi	r25, 0x01	; 1
					{
						printf_P(PSTR("MIDI Note %s - Channel %d, Pitch %d, Velocity %d"), NoteOnEvent ? "On" : "Off",
     4e2:	2d b7       	in	r18, 0x3d	; 61
     4e4:	3e b7       	in	r19, 0x3e	; 62
     4e6:	2a 50       	subi	r18, 0x0A	; 10
     4e8:	30 40       	sbci	r19, 0x00	; 0
     4ea:	0f b6       	in	r0, 0x3f	; 63
     4ec:	f8 94       	cli
     4ee:	3e bf       	out	0x3e, r19	; 62
     4f0:	0f be       	out	0x3f, r0	; 63
     4f2:	2d bf       	out	0x3d, r18	; 61
     4f4:	ed b7       	in	r30, 0x3d	; 61
     4f6:	fe b7       	in	r31, 0x3e	; 62
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	ad b7       	in	r26, 0x3d	; 61
     4fc:	be b7       	in	r27, 0x3e	; 62
     4fe:	12 96       	adiw	r26, 0x02	; 2
     500:	bc 92       	st	X, r11
     502:	ae 92       	st	-X, r10
     504:	11 97       	sbiw	r26, 0x01	; 1
     506:	93 83       	std	Z+3, r25	; 0x03
     508:	82 83       	std	Z+2, r24	; 0x02
     50a:	8c 81       	ldd	r24, Y+4	; 0x04
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	8f 70       	andi	r24, 0x0F	; 15
     510:	90 70       	andi	r25, 0x00	; 0
     512:	01 96       	adiw	r24, 0x01	; 1
     514:	95 83       	std	Z+5, r25	; 0x05
     516:	84 83       	std	Z+4, r24	; 0x04
     518:	8d 81       	ldd	r24, Y+5	; 0x05
     51a:	86 83       	std	Z+6, r24	; 0x06
     51c:	17 82       	std	Z+7, r1	; 0x07
     51e:	8e 81       	ldd	r24, Y+6	; 0x06
     520:	80 87       	std	Z+8, r24	; 0x08
     522:	11 86       	std	Z+9, r1	; 0x09
     524:	1c d7       	rcall	.+3640   	; 0x135e <printf_P>
     526:	2d b7       	in	r18, 0x3d	; 61
     528:	3e b7       	in	r19, 0x3e	; 62
     52a:	26 5f       	subi	r18, 0xF6	; 246
     52c:	3f 4f       	sbci	r19, 0xFF	; 255
     52e:	0f b6       	in	r0, 0x3f	; 63
     530:	f8 94       	cli
     532:	3e bf       	out	0x3e, r19	; 62
     534:	0f be       	out	0x3f, r0	; 63
     536:	2d bf       	out	0x3d, r18	; 61
				}
		
				break;
		}
	
		MIDI_Host_USBTask(&Keyboard_MIDI_Interface);
     538:	81 ea       	ldi	r24, 0xA1	; 161
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	21 d6       	rcall	.+3138   	; 0x1180 <MIDI_Host_USBTask>
		USB_USBTask();
     53e:	71 d5       	rcall	.+2786   	; 0x1022 <USB_USBTask>
	}
     540:	85 cf       	rjmp	.-246    	; 0x44c <main+0x5c>

00000542 <SerialStream_TxByte>:
			 *
			 *  \param[in] DataByte  Byte to transmit through the USART
			 */
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     542:	90 91 c8 00 	lds	r25, 0x00C8
     546:	95 ff       	sbrs	r25, 5
     548:	fc cf       	rjmp	.-8      	; 0x542 <SerialStream_TxByte>
				UDR1 = DataByte;
     54a:	80 93 ce 00 	sts	0x00CE, r24
static int SerialStream_TxByte(char DataByte, FILE *Stream)
{
	Serial_TxByte(DataByte);

	return 0;
}
     54e:	80 e0       	ldi	r24, 0x00	; 0
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	08 95       	ret

00000554 <SerialStream_RxByte>:
			 *
			 *  \return Byte received from the USART
			 */
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
     554:	80 91 c8 00 	lds	r24, 0x00C8
     558:	87 ff       	sbrs	r24, 7
     55a:	fc cf       	rjmp	.-8      	; 0x554 <SerialStream_RxByte>
				return UDR1; 
     55c:	80 91 ce 00 	lds	r24, 0x00CE

static int SerialStream_RxByte(FILE *Stream)
{
	return Serial_RxByte();
}
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	08 95       	ret

00000564 <USB_Host_WaitMS>:
	}
}

uint8_t USB_Host_WaitMS(uint8_t MS)
{
	bool    BusSuspended = USB_Host_IsBusSuspended();
     564:	20 91 9e 00 	lds	r18, 0x009E
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	
	USB_Host_ResumeBus();
     568:	90 91 9e 00 	lds	r25, 0x009E
     56c:	91 60       	ori	r25, 0x01	; 1
     56e:	90 93 9e 00 	sts	0x009E, r25

	while (MS)
     572:	26 c0       	rjmp	.+76     	; 0x5c0 <USB_Host_WaitMS+0x5c>
	{
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     574:	90 91 9f 00 	lds	r25, 0x009F
     578:	95 ff       	sbrs	r25, 5
     57a:	06 c0       	rjmp	.+12     	; 0x588 <USB_Host_WaitMS+0x24>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     57c:	90 91 9f 00 	lds	r25, 0x009F
     580:	9f 7d       	andi	r25, 0xDF	; 223
     582:	90 93 9f 00 	sts	0x009F, r25
			MS--;
     586:	81 50       	subi	r24, 0x01	; 1
		}
					
		if ((USB_HostState == HOST_STATE_Unattached) || (USB_CurrentMode == USB_MODE_DEVICE))
     588:	90 91 df 01 	lds	r25, 0x01DF
     58c:	92 30       	cpi	r25, 0x02	; 2
     58e:	11 f4       	brne	.+4      	; 0x594 <USB_Host_WaitMS+0x30>
     590:	81 e0       	ldi	r24, 0x01	; 1
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <USB_Host_WaitMS+0x60>
			ErrorCode = HOST_WAITERROR_DeviceDisconnect;
			
			break;
		}

		if (Pipe_IsError() == true)
     594:	90 91 a6 00 	lds	r25, 0x00A6
     598:	94 ff       	sbrs	r25, 4
     59a:	07 c0       	rjmp	.+14     	; 0x5aa <USB_Host_WaitMS+0x46>
		{
			Pipe_ClearError();
     59c:	80 91 a6 00 	lds	r24, 0x00A6
     5a0:	8f 7e       	andi	r24, 0xEF	; 239
     5a2:	80 93 a6 00 	sts	0x00A6, r24
     5a6:	82 e0       	ldi	r24, 0x02	; 2
			ErrorCode = HOST_WAITERROR_PipeError;
			
			break;
     5a8:	0d c0       	rjmp	.+26     	; 0x5c4 <USB_Host_WaitMS+0x60>
		}
		
		if (Pipe_IsStalled() == true)
     5aa:	90 91 a6 00 	lds	r25, 0x00A6
     5ae:	91 ff       	sbrs	r25, 1
     5b0:	07 c0       	rjmp	.+14     	; 0x5c0 <USB_Host_WaitMS+0x5c>
		{
			Pipe_ClearStall();
     5b2:	80 91 a6 00 	lds	r24, 0x00A6
     5b6:	8d 7f       	andi	r24, 0xFD	; 253
     5b8:	80 93 a6 00 	sts	0x00A6, r24
     5bc:	83 e0       	ldi	r24, 0x03	; 3
			ErrorCode = HOST_WAITERROR_SetupStalled;
			
			break;			
     5be:	02 c0       	rjmp	.+4      	; 0x5c4 <USB_Host_WaitMS+0x60>
	bool    BusSuspended = USB_Host_IsBusSuspended();
	uint8_t ErrorCode    = HOST_WAITERROR_Successful;
	
	USB_Host_ResumeBus();

	while (MS)
     5c0:	88 23       	and	r24, r24
     5c2:	c1 f6       	brne	.-80     	; 0x574 <USB_Host_WaitMS+0x10>
			
			break;			
		}
	}

	if (BusSuspended)
     5c4:	20 fd       	sbrc	r18, 0
     5c6:	05 c0       	rjmp	.+10     	; 0x5d2 <USB_Host_WaitMS+0x6e>
	  USB_Host_SuspendBus();
     5c8:	90 91 9e 00 	lds	r25, 0x009E
     5cc:	9e 7f       	andi	r25, 0xFE	; 254
     5ce:	90 93 9e 00 	sts	0x009E, r25

	return ErrorCode;
}
     5d2:	08 95       	ret

000005d4 <USB_Host_ResetDevice>:

static void USB_Host_ResetDevice(void)
{
	bool BusSuspended = USB_Host_IsBusSuspended();
     5d4:	90 91 9e 00 	lds	r25, 0x009E

	USB_INT_Disable(USB_INT_DDISCI);
     5d8:	80 91 a0 00 	lds	r24, 0x00A0
     5dc:	8d 7f       	andi	r24, 0xFD	; 253
     5de:	80 93 a0 00 	sts	0x00A0, r24
	
	USB_Host_ResetBus();
     5e2:	80 91 9e 00 	lds	r24, 0x009E
     5e6:	82 60       	ori	r24, 0x02	; 2
     5e8:	80 93 9e 00 	sts	0x009E, r24
	while (!(USB_Host_IsBusResetComplete()));
     5ec:	80 91 9e 00 	lds	r24, 0x009E
     5f0:	81 fd       	sbrc	r24, 1
     5f2:	fc cf       	rjmp	.-8      	; 0x5ec <USB_Host_ResetDevice+0x18>

	USB_Host_ResumeBus();
     5f4:	80 91 9e 00 	lds	r24, 0x009E
     5f8:	81 60       	ori	r24, 0x01	; 1
     5fa:	80 93 9e 00 	sts	0x009E, r24

	USB_INT_Clear(USB_INT_HSOFI);
     5fe:	80 91 9f 00 	lds	r24, 0x009F
     602:	8f 7d       	andi	r24, 0xDF	; 223
     604:	80 93 9f 00 	sts	0x009F, r24
     608:	8a e0       	ldi	r24, 0x0A	; 10
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     60a:	20 ed       	ldi	r18, 0xD0	; 208
     60c:	37 e0       	ldi	r19, 0x07	; 7
		/* Workaround for powerless-pull-up devices. After a USB bus reset,
		   all disconnection interrupts are suppressed while a USB frame is
		   looked for - if it is found within 10ms, the device is still
		   present.                                                        */

		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     60e:	40 91 9f 00 	lds	r20, 0x009F
     612:	45 ff       	sbrs	r20, 5
     614:	0b c0       	rjmp	.+22     	; 0x62c <USB_Host_ResetDevice+0x58>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     616:	80 91 9f 00 	lds	r24, 0x009F
     61a:	8f 7d       	andi	r24, 0xDF	; 223
     61c:	80 93 9f 00 	sts	0x009F, r24
			USB_INT_Clear(USB_INT_DDISCI);
     620:	80 91 9f 00 	lds	r24, 0x009F
     624:	8d 7f       	andi	r24, 0xFD	; 253
     626:	80 93 9f 00 	sts	0x009F, r24
			break;
     62a:	05 c0       	rjmp	.+10     	; 0x636 <USB_Host_ResetDevice+0x62>
     62c:	f9 01       	movw	r30, r18
     62e:	31 97       	sbiw	r30, 0x01	; 1
     630:	f1 f7       	brne	.-4      	; 0x62e <USB_Host_ResetDevice+0x5a>

	USB_Host_ResumeBus();

	USB_INT_Clear(USB_INT_HSOFI);

	for (uint8_t MSRem = 10; MSRem != 0; MSRem--)
     632:	81 50       	subi	r24, 0x01	; 1
     634:	61 f7       	brne	.-40     	; 0x60e <USB_Host_ResetDevice+0x3a>
		}
		
		_delay_ms(1);
	}

	if (BusSuspended)
     636:	90 fd       	sbrc	r25, 0
     638:	05 c0       	rjmp	.+10     	; 0x644 <USB_Host_ResetDevice+0x70>
	  USB_Host_SuspendBus();
     63a:	80 91 9e 00 	lds	r24, 0x009E
     63e:	8e 7f       	andi	r24, 0xFE	; 254
     640:	80 93 9e 00 	sts	0x009E, r24

	USB_INT_Enable(USB_INT_DDISCI);
     644:	80 91 a0 00 	lds	r24, 0x00A0
     648:	82 60       	ori	r24, 0x02	; 2
     64a:	80 93 a0 00 	sts	0x00A0, r24
}
     64e:	08 95       	ret

00000650 <USB_Host_SetDeviceConfiguration>:

uint8_t USB_Host_SetDeviceConfiguration(const uint8_t ConfigNumber)
{
	USB_ControlRequest = (USB_Request_Header_t)
     650:	10 92 d7 01 	sts	0x01D7, r1
     654:	99 e0       	ldi	r25, 0x09	; 9
     656:	90 93 d8 01 	sts	0x01D8, r25
     65a:	80 93 d9 01 	sts	0x01D9, r24
     65e:	10 92 da 01 	sts	0x01DA, r1
     662:	10 92 dc 01 	sts	0x01DC, r1
     666:	10 92 db 01 	sts	0x01DB, r1
     66a:	10 92 de 01 	sts	0x01DE, r1
     66e:	10 92 dd 01 	sts	0x01DD, r1
			.wValue        = ConfigNumber,
			.wIndex        = 0,
			.wLength       = 0,
		};

	Pipe_SelectPipe(PIPE_CONTROLPIPE);
     672:	10 92 a7 00 	sts	0x00A7, r1
	
	return USB_Host_SendControlRequest(NULL);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	90 e0       	ldi	r25, 0x00	; 0
}
     67a:	68 c1       	rjmp	.+720    	; 0x94c <USB_Host_SendControlRequest>

0000067c <USB_Host_ProcessNextHostState>:

#define  INCLUDE_FROM_HOST_C
#include "Host.h"

void USB_Host_ProcessNextHostState(void)
{
     67c:	ef 92       	push	r14
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	df 93       	push	r29
     684:	cf 93       	push	r28
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	28 97       	sbiw	r28, 0x08	; 8
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
	uint8_t SubErrorCode = HOST_ENUMERROR_NoError;

	static uint16_t WaitMSRemaining;
	static uint8_t  PostWaitState;

	switch (USB_HostState)
     696:	80 91 df 01 	lds	r24, 0x01DF
     69a:	86 30       	cpi	r24, 0x06	; 6
     69c:	09 f4       	brne	.+2      	; 0x6a0 <USB_Host_ProcessNextHostState+0x24>
     69e:	97 c0       	rjmp	.+302    	; 0x7ce <USB_Host_ProcessNextHostState+0x152>
     6a0:	87 30       	cpi	r24, 0x07	; 7
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <USB_Host_ProcessNextHostState+0x44>
     6a4:	83 30       	cpi	r24, 0x03	; 3
     6a6:	c9 f1       	breq	.+114    	; 0x71a <USB_Host_ProcessNextHostState+0x9e>
     6a8:	84 30       	cpi	r24, 0x04	; 4
     6aa:	20 f4       	brcc	.+8      	; 0x6b4 <USB_Host_ProcessNextHostState+0x38>
     6ac:	81 30       	cpi	r24, 0x01	; 1
     6ae:	09 f0       	breq	.+2      	; 0x6b2 <USB_Host_ProcessNextHostState+0x36>
     6b0:	18 c1       	rjmp	.+560    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
     6b2:	13 c0       	rjmp	.+38     	; 0x6da <USB_Host_ProcessNextHostState+0x5e>
     6b4:	84 30       	cpi	r24, 0x04	; 4
     6b6:	c9 f1       	breq	.+114    	; 0x72a <USB_Host_ProcessNextHostState+0xae>
     6b8:	85 30       	cpi	r24, 0x05	; 5
     6ba:	09 f0       	breq	.+2      	; 0x6be <USB_Host_ProcessNextHostState+0x42>
     6bc:	12 c1       	rjmp	.+548    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
     6be:	5e c0       	rjmp	.+188    	; 0x77c <USB_Host_ProcessNextHostState+0x100>
     6c0:	88 30       	cpi	r24, 0x08	; 8
     6c2:	09 f4       	brne	.+2      	; 0x6c6 <USB_Host_ProcessNextHostState+0x4a>
     6c4:	9e c0       	rjmp	.+316    	; 0x802 <USB_Host_ProcessNextHostState+0x186>
     6c6:	88 30       	cpi	r24, 0x08	; 8
     6c8:	08 f4       	brcc	.+2      	; 0x6cc <USB_Host_ProcessNextHostState+0x50>
     6ca:	8d c0       	rjmp	.+282    	; 0x7e6 <USB_Host_ProcessNextHostState+0x16a>
     6cc:	89 30       	cpi	r24, 0x09	; 9
     6ce:	09 f4       	brne	.+2      	; 0x6d2 <USB_Host_ProcessNextHostState+0x56>
     6d0:	b7 c0       	rjmp	.+366    	; 0x840 <USB_Host_ProcessNextHostState+0x1c4>
     6d2:	8a 30       	cpi	r24, 0x0A	; 10
     6d4:	09 f0       	breq	.+2      	; 0x6d8 <USB_Host_ProcessNextHostState+0x5c>
     6d6:	05 c1       	rjmp	.+522    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
     6d8:	eb c0       	rjmp	.+470    	; 0x8b0 <USB_Host_ProcessNextHostState+0x234>
	{
		case HOST_STATE_WaitForDevice:
			if (WaitMSRemaining)
     6da:	00 91 d4 01 	lds	r16, 0x01D4
     6de:	10 91 d5 01 	lds	r17, 0x01D5
     6e2:	01 15       	cp	r16, r1
     6e4:	11 05       	cpc	r17, r1
     6e6:	09 f4       	brne	.+2      	; 0x6ea <USB_Host_ProcessNextHostState+0x6e>
     6e8:	fc c0       	rjmp	.+504    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
			{
				if ((SubErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	3b df       	rcall	.-394    	; 0x564 <USB_Host_WaitMS>
     6ee:	68 2f       	mov	r22, r24
     6f0:	88 23       	and	r24, r24
     6f2:	31 f0       	breq	.+12     	; 0x700 <USB_Host_ProcessNextHostState+0x84>
				{
					USB_HostState = PostWaitState;
     6f4:	80 91 d3 01 	lds	r24, 0x01D3
     6f8:	80 93 df 01 	sts	0x01DF, r24
     6fc:	81 e0       	ldi	r24, 0x01	; 1
					ErrorCode     = HOST_ENUMERROR_WaitStage;
					break;
     6fe:	ed c0       	rjmp	.+474    	; 0x8da <USB_Host_ProcessNextHostState+0x25e>
				}
				
				if (!(--WaitMSRemaining))
     700:	01 50       	subi	r16, 0x01	; 1
     702:	10 40       	sbci	r17, 0x00	; 0
     704:	10 93 d5 01 	sts	0x01D5, r17
     708:	00 93 d4 01 	sts	0x01D4, r16
     70c:	01 15       	cp	r16, r1
     70e:	11 05       	cpc	r17, r1
     710:	09 f0       	breq	.+2      	; 0x714 <USB_Host_ProcessNextHostState+0x98>
     712:	e7 c0       	rjmp	.+462    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
				  USB_HostState = PostWaitState;
     714:	80 91 d3 01 	lds	r24, 0x01D3
     718:	d0 c0       	rjmp	.+416    	; 0x8ba <USB_Host_ProcessNextHostState+0x23e>
			}
		
			break;
		case HOST_STATE_Powered:
			WaitMSRemaining = HOST_DEVICE_SETTLE_DELAY_MS;
     71a:	8c ed       	ldi	r24, 0xDC	; 220
     71c:	95 e0       	ldi	r25, 0x05	; 5
     71e:	90 93 d5 01 	sts	0x01D5, r25
     722:	80 93 d4 01 	sts	0x01D4, r24
		
			USB_HostState = HOST_STATE_Powered_WaitForDeviceSettle;
     726:	84 e0       	ldi	r24, 0x04	; 4
     728:	c8 c0       	rjmp	.+400    	; 0x8ba <USB_Host_ProcessNextHostState+0x23e>
     72a:	80 ed       	ldi	r24, 0xD0	; 208
     72c:	97 e0       	ldi	r25, 0x07	; 7
     72e:	01 97       	sbiw	r24, 0x01	; 1
     730:	f1 f7       	brne	.-4      	; 0x72e <USB_Host_ProcessNextHostState+0xb2>
			break;
		case HOST_STATE_Powered_WaitForDeviceSettle:
			#if HOST_DEVICE_SETTLE_DELAY_MS > 0
			_delay_ms(1);

			if (!(WaitMSRemaining--))
     732:	80 91 d4 01 	lds	r24, 0x01D4
     736:	90 91 d5 01 	lds	r25, 0x01D5
     73a:	9c 01       	movw	r18, r24
     73c:	21 50       	subi	r18, 0x01	; 1
     73e:	30 40       	sbci	r19, 0x00	; 0
     740:	30 93 d5 01 	sts	0x01D5, r19
     744:	20 93 d4 01 	sts	0x01D4, r18
     748:	00 97       	sbiw	r24, 0x00	; 0
     74a:	09 f0       	breq	.+2      	; 0x74e <USB_Host_ProcessNextHostState+0xd2>
     74c:	ca c0       	rjmp	.+404    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
			{
				USB_Host_VBUS_Manual_Off();
     74e:	77 98       	cbi	0x0e, 7	; 14

				USB_OTGPAD_On();
     750:	80 91 d8 00 	lds	r24, 0x00D8
     754:	80 61       	ori	r24, 0x10	; 16
     756:	80 93 d8 00 	sts	0x00D8, r24
				USB_Host_VBUS_Auto_Enable();
     75a:	80 91 dd 00 	lds	r24, 0x00DD
     75e:	8b 7f       	andi	r24, 0xFB	; 251
     760:	80 93 dd 00 	sts	0x00DD, r24
     764:	80 91 d7 00 	lds	r24, 0x00D7
     768:	80 61       	ori	r24, 0x10	; 16
     76a:	80 93 d7 00 	sts	0x00D7, r24
				USB_Host_VBUS_Auto_On();
     76e:	80 91 dd 00 	lds	r24, 0x00DD
     772:	82 60       	ori	r24, 0x02	; 2
     774:	80 93 dd 00 	sts	0x00DD, r24
				
				USB_HostState = HOST_STATE_Powered_WaitForConnect;
     778:	85 e0       	ldi	r24, 0x05	; 5
     77a:	9f c0       	rjmp	.+318    	; 0x8ba <USB_Host_ProcessNextHostState+0x23e>
			USB_HostState = HOST_STATE_Powered_WaitForConnect;			
			#endif
			
			break;
		case HOST_STATE_Powered_WaitForConnect:		
			if (USB_INT_HasOccurred(USB_INT_DCONNI))
     77c:	80 91 9f 00 	lds	r24, 0x009F
     780:	80 ff       	sbrs	r24, 0
     782:	af c0       	rjmp	.+350    	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
			{	
				USB_INT_Clear(USB_INT_DCONNI);
     784:	80 91 9f 00 	lds	r24, 0x009F
     788:	8e 7f       	andi	r24, 0xFE	; 254
     78a:	80 93 9f 00 	sts	0x009F, r24
				USB_INT_Clear(USB_INT_DDISCI);
     78e:	80 91 9f 00 	lds	r24, 0x009F
     792:	8d 7f       	andi	r24, 0xFD	; 253
     794:	80 93 9f 00 	sts	0x009F, r24

				USB_INT_Clear(USB_INT_VBERRI);
     798:	80 91 df 00 	lds	r24, 0x00DF
     79c:	8d 7f       	andi	r24, 0xFD	; 253
     79e:	80 93 df 00 	sts	0x00DF, r24
				USB_INT_Enable(USB_INT_VBERRI);
     7a2:	80 91 de 00 	lds	r24, 0x00DE
     7a6:	82 60       	ori	r24, 0x02	; 2
     7a8:	80 93 de 00 	sts	0x00DE, r24
					
				USB_Host_ResumeBus();
     7ac:	80 91 9e 00 	lds	r24, 0x009E
     7b0:	81 60       	ori	r24, 0x01	; 1
     7b2:	80 93 9e 00 	sts	0x009E, r24
				Pipe_ClearPipes();
     7b6:	87 d2       	rcall	.+1294   	; 0xcc6 <Pipe_ClearPipes>
				
				HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Powered_DoReset);
     7b8:	81 e0       	ldi	r24, 0x01	; 1
     7ba:	80 93 df 01 	sts	0x01DF, r24
     7be:	84 e6       	ldi	r24, 0x64	; 100
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	90 93 d5 01 	sts	0x01D5, r25
     7c6:	80 93 d4 01 	sts	0x01D4, r24
     7ca:	86 e0       	ldi	r24, 0x06	; 6
     7cc:	6e c0       	rjmp	.+220    	; 0x8aa <USB_Host_ProcessNextHostState+0x22e>
			}

			break;
		case HOST_STATE_Powered_DoReset:
			USB_Host_ResetDevice();
     7ce:	02 df       	rcall	.-508    	; 0x5d4 <USB_Host_ResetDevice>

			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Powered_ConfigPipe);
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 df 01 	sts	0x01DF, r24
     7d6:	88 ec       	ldi	r24, 0xC8	; 200
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	90 93 d5 01 	sts	0x01D5, r25
     7de:	80 93 d4 01 	sts	0x01D4, r24
     7e2:	87 e0       	ldi	r24, 0x07	; 7
     7e4:	62 c0       	rjmp	.+196    	; 0x8aa <USB_Host_ProcessNextHostState+0x22e>
			break;
		case HOST_STATE_Powered_ConfigPipe:
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	20 e0       	ldi	r18, 0x00	; 0
     7ee:	00 e4       	ldi	r16, 0x40	; 64
     7f0:	10 e0       	ldi	r17, 0x00	; 0
     7f2:	ee 24       	eor	r14, r14
     7f4:	26 d2       	rcall	.+1100   	; 0xc42 <Pipe_ConfigurePipe>
							   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
							   PIPE_CONTROLPIPE_DEFAULT_SIZE, PIPE_BANK_SINGLE);		
		
			if (!(Pipe_IsConfigured()))
     7f6:	80 91 ac 00 	lds	r24, 0x00AC
     7fa:	87 ff       	sbrs	r24, 7
     7fc:	6c c0       	rjmp	.+216    	; 0x8d6 <USB_Host_ProcessNextHostState+0x25a>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_HostState = HOST_STATE_Default;
     7fe:	88 e0       	ldi	r24, 0x08	; 8
     800:	5c c0       	rjmp	.+184    	; 0x8ba <USB_Host_ProcessNextHostState+0x23e>
			break;
		case HOST_STATE_Default:
			USB_ControlRequest = (USB_Request_Header_t)
     802:	a7 ed       	ldi	r26, 0xD7	; 215
     804:	b1 e0       	ldi	r27, 0x01	; 1
     806:	e8 ec       	ldi	r30, 0xC8	; 200
     808:	f1 e0       	ldi	r31, 0x01	; 1
     80a:	88 e0       	ldi	r24, 0x08	; 8
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	81 50       	subi	r24, 0x01	; 1
     812:	e1 f7       	brne	.-8      	; 0x80c <USB_Host_ProcessNextHostState+0x190>
					.wLength       = 8,
				};

			uint8_t DataBuffer[8];

			if ((SubErrorCode = USB_Host_SendControlRequest(DataBuffer)) != HOST_SENDCONTROL_Successful)
     814:	ce 01       	movw	r24, r28
     816:	01 96       	adiw	r24, 0x01	; 1
     818:	99 d0       	rcall	.+306    	; 0x94c <USB_Host_SendControlRequest>
     81a:	68 2f       	mov	r22, r24
     81c:	88 23       	and	r24, r24
     81e:	09 f0       	breq	.+2      	; 0x822 <USB_Host_ProcessNextHostState+0x1a6>
     820:	58 c0       	rjmp	.+176    	; 0x8d2 <USB_Host_ProcessNextHostState+0x256>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			USB_ControlPipeSize = DataBuffer[offsetof(USB_Descriptor_Device_t, Endpoint0Size)];
     822:	88 85       	ldd	r24, Y+8	; 0x08
     824:	80 93 d0 01 	sts	0x01D0, r24
	
			USB_Host_ResetDevice();
     828:	d5 de       	rcall	.-598    	; 0x5d4 <USB_Host_ResetDevice>
			
			HOST_TASK_NONBLOCK_WAIT(200, HOST_STATE_Default_PostReset);
     82a:	81 e0       	ldi	r24, 0x01	; 1
     82c:	80 93 df 01 	sts	0x01DF, r24
     830:	88 ec       	ldi	r24, 0xC8	; 200
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	90 93 d5 01 	sts	0x01D5, r25
     838:	80 93 d4 01 	sts	0x01D4, r24
     83c:	89 e0       	ldi	r24, 0x09	; 9
     83e:	35 c0       	rjmp	.+106    	; 0x8aa <USB_Host_ProcessNextHostState+0x22e>
			break;
		case HOST_STATE_Default_PostReset:
			Pipe_DisablePipe();
     840:	80 91 a9 00 	lds	r24, 0x00A9
     844:	8e 7f       	andi	r24, 0xFE	; 254
     846:	80 93 a9 00 	sts	0x00A9, r24
			Pipe_DeallocateMemory();		
     84a:	80 91 ab 00 	lds	r24, 0x00AB
     84e:	8d 7f       	andi	r24, 0xFD	; 253
     850:	80 93 ab 00 	sts	0x00AB, r24
			Pipe_ResetPipe(PIPE_CONTROLPIPE);
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 a8 00 	sts	0x00A8, r24
     85a:	10 92 a8 00 	sts	0x00A8, r1
			
			Pipe_ConfigurePipe(PIPE_CONTROLPIPE, EP_TYPE_CONTROL,
     85e:	00 91 d0 01 	lds	r16, 0x01D0
     862:	80 e0       	ldi	r24, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	20 e0       	ldi	r18, 0x00	; 0
     86a:	10 e0       	ldi	r17, 0x00	; 0
     86c:	ee 24       	eor	r14, r14
     86e:	e9 d1       	rcall	.+978    	; 0xc42 <Pipe_ConfigurePipe>
			                   PIPE_TOKEN_SETUP, ENDPOINT_CONTROLEP,
			                   USB_ControlPipeSize, PIPE_BANK_SINGLE);

			if (!(Pipe_IsConfigured()))
     870:	80 91 ac 00 	lds	r24, 0x00AC
     874:	87 ff       	sbrs	r24, 7
     876:	2f c0       	rjmp	.+94     	; 0x8d6 <USB_Host_ProcessNextHostState+0x25a>
				ErrorCode    = HOST_ENUMERROR_PipeConfigError;
				SubErrorCode = 0;
				break;
			}

			USB_ControlRequest = (USB_Request_Header_t)
     878:	a7 ed       	ldi	r26, 0xD7	; 215
     87a:	b1 e0       	ldi	r27, 0x01	; 1
     87c:	e0 ec       	ldi	r30, 0xC0	; 192
     87e:	f1 e0       	ldi	r31, 0x01	; 1
     880:	88 e0       	ldi	r24, 0x08	; 8
     882:	01 90       	ld	r0, Z+
     884:	0d 92       	st	X+, r0
     886:	81 50       	subi	r24, 0x01	; 1
     888:	e1 f7       	brne	.-8      	; 0x882 <USB_Host_ProcessNextHostState+0x206>
					.wValue        = USB_HOST_DEVICEADDRESS,
					.wIndex        = 0,
					.wLength       = 0,
				};

			if ((SubErrorCode = USB_Host_SendControlRequest(NULL)) != HOST_SENDCONTROL_Successful)
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	5e d0       	rcall	.+188    	; 0x94c <USB_Host_SendControlRequest>
     890:	68 2f       	mov	r22, r24
     892:	88 23       	and	r24, r24
     894:	f1 f4       	brne	.+60     	; 0x8d2 <USB_Host_ProcessNextHostState+0x256>
			{
				ErrorCode = HOST_ENUMERROR_ControlError;
				break;
			}

			HOST_TASK_NONBLOCK_WAIT(100, HOST_STATE_Default_PostAddressSet);
     896:	81 e0       	ldi	r24, 0x01	; 1
     898:	80 93 df 01 	sts	0x01DF, r24
     89c:	84 e6       	ldi	r24, 0x64	; 100
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	90 93 d5 01 	sts	0x01D5, r25
     8a4:	80 93 d4 01 	sts	0x01D4, r24
     8a8:	8a e0       	ldi	r24, 0x0A	; 10
     8aa:	80 93 d3 01 	sts	0x01D3, r24
			break;
     8ae:	19 c0       	rjmp	.+50     	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
		case HOST_STATE_Default_PostAddressSet:
			USB_Host_SetDeviceAddress(USB_HOST_DEVICEADDRESS);
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	80 93 a1 00 	sts	0x00A1, r24

			EVENT_USB_Host_DeviceEnumerationComplete();
     8b6:	91 dc       	rcall	.-1758   	; 0x1da <EVENT_USB_Host_DeviceEnumerationComplete>
			USB_HostState = HOST_STATE_Addressed;
     8b8:	8b e0       	ldi	r24, 0x0B	; 11
     8ba:	80 93 df 01 	sts	0x01DF, r24
     8be:	11 c0       	rjmp	.+34     	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
	{
		EVENT_USB_Host_DeviceEnumerationFailed(ErrorCode, SubErrorCode);
     8c0:	91 dc       	rcall	.-1758   	; 0x1e4 <EVENT_USB_Host_DeviceEnumerationFailed>

		USB_Host_VBUS_Auto_Off();
     8c2:	80 91 dd 00 	lds	r24, 0x00DD
     8c6:	81 60       	ori	r24, 0x01	; 1
     8c8:	80 93 dd 00 	sts	0x00DD, r24

		EVENT_USB_Host_DeviceUnattached();
     8cc:	d9 dc       	rcall	.-1614   	; 0x280 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     8ce:	49 d1       	rcall	.+658    	; 0xb62 <USB_ResetInterface>
     8d0:	08 c0       	rjmp	.+16     	; 0x8e2 <USB_Host_ProcessNextHostState+0x266>
	}
}
     8d2:	83 e0       	ldi	r24, 0x03	; 3
     8d4:	02 c0       	rjmp	.+4      	; 0x8da <USB_Host_ProcessNextHostState+0x25e>
     8d6:	60 e0       	ldi	r22, 0x00	; 0
     8d8:	84 e0       	ldi	r24, 0x04	; 4
			EVENT_USB_Host_DeviceEnumerationComplete();
			USB_HostState = HOST_STATE_Addressed;
			break;
	}

	if ((ErrorCode != HOST_ENUMERROR_NoError) && (USB_HostState != HOST_STATE_Unattached))
     8da:	90 91 df 01 	lds	r25, 0x01DF
     8de:	92 30       	cpi	r25, 0x02	; 2
     8e0:	79 f7       	brne	.-34     	; 0x8c0 <USB_Host_ProcessNextHostState+0x244>

		EVENT_USB_Host_DeviceUnattached();

		USB_ResetInterface();
	}
}
     8e2:	28 96       	adiw	r28, 0x08	; 8
     8e4:	0f b6       	in	r0, 0x3f	; 63
     8e6:	f8 94       	cli
     8e8:	de bf       	out	0x3e, r29	; 62
     8ea:	0f be       	out	0x3f, r0	; 63
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ef 90       	pop	r14
     8f8:	08 95       	ret

000008fa <USB_Host_WaitForIOS>:

	return ReturnStatus;
}

static uint8_t USB_Host_WaitForIOS(const uint8_t WaitType)
{
     8fa:	1f 93       	push	r17
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	18 2f       	mov	r17, r24
     902:	c8 ee       	ldi	r28, 0xE8	; 232
     904:	d3 e0       	ldi	r29, 0x03	; 3
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;	
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif
	
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     906:	09 c0       	rjmp	.+18     	; 0x91a <USB_Host_WaitForIOS+0x20>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
	{
		uint8_t ErrorCode;

		if ((ErrorCode = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	2c de       	rcall	.-936    	; 0x564 <USB_Host_WaitMS>
     90c:	88 23       	and	r24, r24
     90e:	d1 f4       	brne	.+52     	; 0x944 <USB_Host_WaitForIOS+0x4a>
		  return ErrorCode;
			
		if (!(TimeoutCounter--))
     910:	20 97       	sbiw	r28, 0x00	; 0
     912:	11 f4       	brne	.+4      	; 0x918 <USB_Host_WaitForIOS+0x1e>
     914:	84 e0       	ldi	r24, 0x04	; 4
     916:	16 c0       	rjmp	.+44     	; 0x944 <USB_Host_WaitForIOS+0x4a>
     918:	21 97       	sbiw	r28, 0x01	; 1
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;	
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif
	
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     91a:	11 23       	and	r17, r17
     91c:	29 f4       	brne	.+10     	; 0x928 <USB_Host_WaitForIOS+0x2e>
     91e:	80 91 a6 00 	lds	r24, 0x00A6
     922:	83 ff       	sbrs	r24, 3
     924:	f1 cf       	rjmp	.-30     	; 0x908 <USB_Host_WaitForIOS+0xe>
     926:	0d c0       	rjmp	.+26     	; 0x942 <USB_Host_WaitForIOS+0x48>
     928:	11 30       	cpi	r17, 0x01	; 1
     92a:	29 f4       	brne	.+10     	; 0x936 <USB_Host_WaitForIOS+0x3c>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
     92c:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;	
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif
	
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     930:	80 ff       	sbrs	r24, 0
     932:	ea cf       	rjmp	.-44     	; 0x908 <USB_Host_WaitForIOS+0xe>
     934:	06 c0       	rjmp	.+12     	; 0x942 <USB_Host_WaitForIOS+0x48>
     936:	12 30       	cpi	r17, 0x02	; 2
     938:	39 f7       	brne	.-50     	; 0x908 <USB_Host_WaitForIOS+0xe>
	         ((WaitType == USB_HOST_WAITFOR_InReceived) && Pipe_IsINReceived()) ||
	         ((WaitType == USB_HOST_WAITFOR_OutReady)   && Pipe_IsOUTReady())))
     93a:	80 91 a6 00 	lds	r24, 0x00A6
	uint8_t  TimeoutCounter = USB_HOST_TIMEOUT_MS;	
	#else
	uint16_t TimeoutCounter = USB_HOST_TIMEOUT_MS;
	#endif
	
	while (!(((WaitType == USB_HOST_WAITFOR_SetupSent)  && Pipe_IsSETUPSent())  ||
     93e:	82 ff       	sbrs	r24, 2
     940:	e3 cf       	rjmp	.-58     	; 0x908 <USB_Host_WaitForIOS+0xe>
     942:	80 e0       	ldi	r24, 0x00	; 0
		if (!(TimeoutCounter--))
		  return HOST_SENDCONTROL_SoftwareTimeOut;
	}

	return HOST_SENDCONTROL_Successful;
}
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <USB_Host_SendControlRequest>:

#define  INCLUDE_FROM_HOSTCHAPTER9_C
#include "HostChapter9.h"

uint8_t USB_Host_SendControlRequest(void* BufferPtr)
{
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	18 2f       	mov	r17, r24
     958:	09 2f       	mov	r16, r25
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
	bool     BusSuspended   = USB_Host_IsBusSuspended();
     95a:	f0 90 9e 00 	lds	r15, 0x009E
	uint8_t  ReturnStatus   = HOST_SENDCONTROL_Successful;
	uint16_t DataLen        = USB_ControlRequest.wLength;
     95e:	c0 91 dd 01 	lds	r28, 0x01DD
     962:	d0 91 de 01 	lds	r29, 0x01DE

	USB_Host_ResumeBus();
     966:	80 91 9e 00 	lds	r24, 0x009E
     96a:	81 60       	ori	r24, 0x01	; 1
     96c:	80 93 9e 00 	sts	0x009E, r24
	
	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	f8 dd       	rcall	.-1040   	; 0x564 <USB_Host_WaitMS>
     974:	88 23       	and	r24, r24
     976:	09 f0       	breq	.+2      	; 0x97a <USB_Host_SendControlRequest+0x2e>
     978:	dd c0       	rjmp	.+442    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
	  goto End_Of_Control_Send;

	Pipe_SetToken(PIPE_TOKEN_SETUP);
     97a:	80 91 aa 00 	lds	r24, 0x00AA
     97e:	8f 7c       	andi	r24, 0xCF	; 207
     980:	80 93 aa 00 	sts	0x00AA, r24
	Pipe_ClearErrorFlags();
     984:	10 92 f5 00 	sts	0x00F5, r1

	Pipe_Unfreeze();
     988:	80 91 a9 00 	lds	r24, 0x00A9
     98c:	8f 7b       	andi	r24, 0xBF	; 191
     98e:	80 93 a9 00 	sts	0x00A9, r24
#if defined(USB_CAN_BE_HOST)

#define  INCLUDE_FROM_HOSTCHAPTER9_C
#include "HostChapter9.h"

uint8_t USB_Host_SendControlRequest(void* BufferPtr)
     992:	e7 ed       	ldi	r30, 0xD7	; 215
     994:	f1 e0       	ldi	r31, 0x01	; 1
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
	  Pipe_Write_Byte(*(HeaderStream++));
     996:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     998:	80 93 af 00 	sts	0x00AF, r24
	Pipe_SetToken(PIPE_TOKEN_SETUP);
	Pipe_ClearErrorFlags();

	Pipe_Unfreeze();

	for (uint8_t HeaderByte = 0; HeaderByte < sizeof(USB_Request_Header_t); HeaderByte++)
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	ef 3d       	cpi	r30, 0xDF	; 223
     9a0:	f8 07       	cpc	r31, r24
     9a2:	c9 f7       	brne	.-14     	; 0x996 <USB_Host_SendControlRequest+0x4a>
	  Pipe_Write_Byte(*(HeaderStream++));

	Pipe_ClearSETUP();
     9a4:	80 91 a6 00 	lds	r24, 0x00A6
     9a8:	98 2f       	mov	r25, r24
     9aa:	97 7f       	andi	r25, 0xF7	; 247
     9ac:	90 93 a6 00 	sts	0x00A6, r25
     9b0:	8f 77       	andi	r24, 0x7F	; 127
     9b2:	80 93 a6 00 	sts	0x00A6, r24
	
	if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_SetupSent)) != HOST_SENDCONTROL_Successful)
     9b6:	80 e0       	ldi	r24, 0x00	; 0
     9b8:	a0 df       	rcall	.-192    	; 0x8fa <USB_Host_WaitForIOS>
     9ba:	88 23       	and	r24, r24
     9bc:	09 f0       	breq	.+2      	; 0x9c0 <USB_Host_SendControlRequest+0x74>
     9be:	ba c0       	rjmp	.+372    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
	  goto End_Of_Control_Send;

	Pipe_Freeze();
     9c0:	80 91 a9 00 	lds	r24, 0x00A9
     9c4:	80 64       	ori	r24, 0x40	; 64
     9c6:	80 93 a9 00 	sts	0x00A9, r24

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	cb dd       	rcall	.-1130   	; 0x564 <USB_Host_WaitMS>
     9ce:	88 23       	and	r24, r24
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <USB_Host_SendControlRequest+0x88>
     9d2:	b0 c0       	rjmp	.+352    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
#include "HostChapter9.h"

uint8_t USB_Host_SendControlRequest(void* BufferPtr)
{
	uint8_t* HeaderStream   = (uint8_t*)&USB_ControlRequest;
	uint8_t* DataStream     = (uint8_t*)BufferPtr;
     9d4:	c8 01       	movw	r24, r16
     9d6:	09 2f       	mov	r16, r25
     9d8:	18 2f       	mov	r17, r24
	Pipe_Freeze();

	if ((ReturnStatus = USB_Host_WaitMS(1)) != HOST_WAITERROR_Successful)
	  goto End_Of_Control_Send;

	if ((USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_DIRECTION) == REQDIR_DEVICETOHOST)
     9da:	80 91 d7 01 	lds	r24, 0x01D7
     9de:	87 ff       	sbrs	r24, 7
     9e0:	57 c0       	rjmp	.+174    	; 0xa90 <USB_Host_SendControlRequest+0x144>
	{
		Pipe_SetToken(PIPE_TOKEN_IN);
     9e2:	80 91 aa 00 	lds	r24, 0x00AA
     9e6:	8f 7c       	andi	r24, 0xCF	; 207
     9e8:	80 61       	ori	r24, 0x10	; 16
     9ea:	80 93 aa 00 	sts	0x00AA, r24
		
		if (DataStream != NULL)
     9ee:	01 15       	cp	r16, r1
     9f0:	11 05       	cpc	r17, r1
     9f2:	81 f5       	brne	.+96     	; 0xa54 <USB_Host_SendControlRequest+0x108>
     9f4:	31 c0       	rjmp	.+98     	; 0xa58 <USB_Host_SendControlRequest+0x10c>
		{
			while (DataLen)
			{
				Pipe_Unfreeze();
     9f6:	80 91 a9 00 	lds	r24, 0x00A9
     9fa:	8f 7b       	andi	r24, 0xBF	; 191
     9fc:	80 93 a9 00 	sts	0x00A9, r24

				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	7b df       	rcall	.-266    	; 0x8fa <USB_Host_WaitForIOS>
     a04:	88 23       	and	r24, r24
     a06:	09 f0       	breq	.+2      	; 0xa0a <USB_Host_SendControlRequest+0xbe>
     a08:	95 c0       	rjmp	.+298    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
				  goto End_Of_Control_Send;
							
				if (!(Pipe_BytesInPipe()))
     a0a:	80 91 f6 00 	lds	r24, 0x00F6
     a0e:	90 91 f7 00 	lds	r25, 0x00F7
     a12:	00 97       	sbiw	r24, 0x00	; 0
     a14:	49 f4       	brne	.+18     	; 0xa28 <USB_Host_SendControlRequest+0xdc>
     a16:	c0 e0       	ldi	r28, 0x00	; 0
     a18:	d0 e0       	ldi	r29, 0x00	; 0
     a1a:	06 c0       	rjmp	.+12     	; 0xa28 <USB_Host_SendControlRequest+0xdc>
			 *  \return Next byte in the currently selected pipe's FIFO buffer
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     a1c:	80 91 af 00 	lds	r24, 0x00AF
				  DataLen = 0;
				
				while (Pipe_BytesInPipe() && DataLen)
				{
					*(DataStream++) = Pipe_Read_Byte();
     a20:	f8 01       	movw	r30, r16
     a22:	81 93       	st	Z+, r24
     a24:	8f 01       	movw	r16, r30
					DataLen--;
     a26:	21 97       	sbiw	r28, 0x01	; 1
				  goto End_Of_Control_Send;
							
				if (!(Pipe_BytesInPipe()))
				  DataLen = 0;
				
				while (Pipe_BytesInPipe() && DataLen)
     a28:	80 91 f6 00 	lds	r24, 0x00F6
     a2c:	90 91 f7 00 	lds	r25, 0x00F7
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	11 f0       	breq	.+4      	; 0xa38 <USB_Host_SendControlRequest+0xec>
     a34:	20 97       	sbiw	r28, 0x00	; 0
     a36:	91 f7       	brne	.-28     	; 0xa1c <USB_Host_SendControlRequest+0xd0>
				{
					*(DataStream++) = Pipe_Read_Byte();
					DataLen--;
				}

				Pipe_Freeze();
     a38:	80 91 a9 00 	lds	r24, 0x00A9
     a3c:	80 64       	ori	r24, 0x40	; 64
     a3e:	80 93 a9 00 	sts	0x00A9, r24
				Pipe_ClearIN();
     a42:	80 91 a6 00 	lds	r24, 0x00A6
     a46:	98 2f       	mov	r25, r24
     a48:	9e 7f       	andi	r25, 0xFE	; 254
     a4a:	90 93 a6 00 	sts	0x00A6, r25
     a4e:	8f 77       	andi	r24, 0x7F	; 127
     a50:	80 93 a6 00 	sts	0x00A6, r24
	{
		Pipe_SetToken(PIPE_TOKEN_IN);
		
		if (DataStream != NULL)
		{
			while (DataLen)
     a54:	20 97       	sbiw	r28, 0x00	; 0
     a56:	79 f6       	brne	.-98     	; 0x9f6 <USB_Host_SendControlRequest+0xaa>
				Pipe_Freeze();
				Pipe_ClearIN();
			}
		}

		Pipe_SetToken(PIPE_TOKEN_OUT);
     a58:	80 91 aa 00 	lds	r24, 0x00AA
     a5c:	8f 7c       	andi	r24, 0xCF	; 207
     a5e:	80 62       	ori	r24, 0x20	; 32
     a60:	80 93 aa 00 	sts	0x00AA, r24
		Pipe_Unfreeze();
     a64:	80 91 a9 00 	lds	r24, 0x00A9
     a68:	8f 7b       	andi	r24, 0xBF	; 191
     a6a:	80 93 a9 00 	sts	0x00A9, r24
		
		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	44 df       	rcall	.-376    	; 0x8fa <USB_Host_WaitForIOS>
     a72:	88 23       	and	r24, r24
     a74:	09 f0       	breq	.+2      	; 0xa78 <USB_Host_SendControlRequest+0x12c>
     a76:	5e c0       	rjmp	.+188    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
		  goto End_Of_Control_Send;

		Pipe_ClearOUT();
     a78:	80 91 a6 00 	lds	r24, 0x00A6
     a7c:	98 2f       	mov	r25, r24
     a7e:	9b 7f       	andi	r25, 0xFB	; 251
     a80:	90 93 a6 00 	sts	0x00A6, r25
     a84:	8f 77       	andi	r24, 0x7F	; 127
     a86:	80 93 a6 00 	sts	0x00A6, r24

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     a8a:	82 e0       	ldi	r24, 0x02	; 2
     a8c:	36 df       	rcall	.-404    	; 0x8fa <USB_Host_WaitForIOS>
     a8e:	52 c0       	rjmp	.+164    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
		  goto End_Of_Control_Send;
	}
	else
	{
		if (DataStream != NULL)
     a90:	01 15       	cp	r16, r1
     a92:	11 05       	cpc	r17, r1
     a94:	b9 f1       	breq	.+110    	; 0xb04 <USB_Host_SendControlRequest+0x1b8>
		{
			Pipe_SetToken(PIPE_TOKEN_OUT);
     a96:	80 91 aa 00 	lds	r24, 0x00AA
     a9a:	8f 7c       	andi	r24, 0xCF	; 207
     a9c:	80 62       	ori	r24, 0x20	; 32
     a9e:	80 93 aa 00 	sts	0x00AA, r24
			Pipe_Unfreeze();	
     aa2:	80 91 a9 00 	lds	r24, 0x00A9
     aa6:	8f 7b       	andi	r24, 0xBF	; 191
     aa8:	80 93 a9 00 	sts	0x00A9, r24

			while (DataLen)
     aac:	20 c0       	rjmp	.+64     	; 0xaee <USB_Host_SendControlRequest+0x1a2>
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     aae:	82 e0       	ldi	r24, 0x02	; 2
     ab0:	24 df       	rcall	.-440    	; 0x8fa <USB_Host_WaitForIOS>
     ab2:	88 23       	and	r24, r24
     ab4:	09 f0       	breq	.+2      	; 0xab8 <USB_Host_SendControlRequest+0x16c>
     ab6:	3e c0       	rjmp	.+124    	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     ab8:	80 91 d0 01 	lds	r24, 0x01D0
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	07 c0       	rjmp	.+14     	; 0xace <USB_Host_SendControlRequest+0x182>
				{					
					Pipe_Write_Byte(*(DataStream++));
     ac0:	f8 01       	movw	r30, r16
     ac2:	21 91       	ld	r18, Z+
     ac4:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     ac6:	20 93 af 00 	sts	0x00AF, r18
					DataLen--;
     aca:	21 97       	sbiw	r28, 0x01	; 1
			while (DataLen)
			{
				if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
				  goto End_Of_Control_Send;

				while (DataLen && (Pipe_BytesInPipe() < USB_ControlPipeSize))
     acc:	39 f0       	breq	.+14     	; 0xadc <USB_Host_SendControlRequest+0x190>
     ace:	20 91 f6 00 	lds	r18, 0x00F6
     ad2:	30 91 f7 00 	lds	r19, 0x00F7
     ad6:	28 17       	cp	r18, r24
     ad8:	39 07       	cpc	r19, r25
     ada:	90 f3       	brcs	.-28     	; 0xac0 <USB_Host_SendControlRequest+0x174>
				{					
					Pipe_Write_Byte(*(DataStream++));
					DataLen--;
				}
				
				Pipe_ClearOUT();
     adc:	80 91 a6 00 	lds	r24, 0x00A6
     ae0:	98 2f       	mov	r25, r24
     ae2:	9b 7f       	andi	r25, 0xFB	; 251
     ae4:	90 93 a6 00 	sts	0x00A6, r25
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	80 93 a6 00 	sts	0x00A6, r24
		if (DataStream != NULL)
		{
			Pipe_SetToken(PIPE_TOKEN_OUT);
			Pipe_Unfreeze();	

			while (DataLen)
     aee:	20 97       	sbiw	r28, 0x00	; 0
     af0:	f1 f6       	brne	.-68     	; 0xaae <USB_Host_SendControlRequest+0x162>
				}
				
				Pipe_ClearOUT();
			}

			if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_OutReady)) != HOST_SENDCONTROL_Successful)
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	02 df       	rcall	.-508    	; 0x8fa <USB_Host_WaitForIOS>
     af6:	88 23       	and	r24, r24
     af8:	e9 f4       	brne	.+58     	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
			  goto End_Of_Control_Send;

			Pipe_Freeze();
     afa:	80 91 a9 00 	lds	r24, 0x00A9
     afe:	80 64       	ori	r24, 0x40	; 64
     b00:	80 93 a9 00 	sts	0x00A9, r24
		}
		
		Pipe_SetToken(PIPE_TOKEN_IN);
     b04:	80 91 aa 00 	lds	r24, 0x00AA
     b08:	8f 7c       	andi	r24, 0xCF	; 207
     b0a:	80 61       	ori	r24, 0x10	; 16
     b0c:	80 93 aa 00 	sts	0x00AA, r24
		Pipe_Unfreeze();
     b10:	80 91 a9 00 	lds	r24, 0x00A9
     b14:	8f 7b       	andi	r24, 0xBF	; 191
     b16:	80 93 a9 00 	sts	0x00A9, r24

		if ((ReturnStatus = USB_Host_WaitForIOS(USB_HOST_WAITFOR_InReceived)) != HOST_SENDCONTROL_Successful)
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	ee de       	rcall	.-548    	; 0x8fa <USB_Host_WaitForIOS>
     b1e:	88 23       	and	r24, r24
     b20:	49 f4       	brne	.+18     	; 0xb34 <USB_Host_SendControlRequest+0x1e8>
		  goto End_Of_Control_Send;

		Pipe_ClearIN();
     b22:	90 91 a6 00 	lds	r25, 0x00A6
     b26:	29 2f       	mov	r18, r25
     b28:	2e 7f       	andi	r18, 0xFE	; 254
     b2a:	20 93 a6 00 	sts	0x00A6, r18
     b2e:	9f 77       	andi	r25, 0x7F	; 127
     b30:	90 93 a6 00 	sts	0x00A6, r25
	}

End_Of_Control_Send:
	Pipe_Freeze();
     b34:	90 91 a9 00 	lds	r25, 0x00A9
     b38:	90 64       	ori	r25, 0x40	; 64
     b3a:	90 93 a9 00 	sts	0x00A9, r25
	
	if (BusSuspended)
     b3e:	f0 fc       	sbrc	r15, 0
     b40:	05 c0       	rjmp	.+10     	; 0xb4c <USB_Host_SendControlRequest+0x200>
	  USB_Host_SuspendBus();
     b42:	90 91 9e 00 	lds	r25, 0x009E
     b46:	9e 7f       	andi	r25, 0xFE	; 254
     b48:	90 93 9e 00 	sts	0x009E, r25

	Pipe_ResetPipe(PIPE_CONTROLPIPE);
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	90 93 a8 00 	sts	0x00A8, r25
     b52:	10 92 a8 00 	sts	0x00A8, r1

	return ReturnStatus;
}
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	1f 91       	pop	r17
     b5c:	0f 91       	pop	r16
     b5e:	ff 90       	pop	r15
     b60:	08 95       	ret

00000b62 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
     b62:	c9 d1       	rcall	.+914    	; 0xef6 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     b64:	d2 d1       	rcall	.+932    	; 0xf0a <USB_INT_ClearAllInterrupts>
	
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
     b66:	82 e0       	ldi	r24, 0x02	; 2
     b68:	80 93 df 01 	sts	0x01DF, r24
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
     b6c:	8c e0       	ldi	r24, 0x0C	; 12
     b6e:	89 bd       	out	0x29, r24	; 41
     b70:	89 b5       	in	r24, 0x29	; 41
     b72:	82 60       	ori	r24, 0x02	; 2
     b74:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
     b76:	09 b4       	in	r0, 0x29	; 41
     b78:	00 fe       	sbrs	r0, 0
     b7a:	fd cf       	rjmp	.-6      	; 0xb76 <USB_ResetInterface+0x14>
	}
	
	USB_Controller_Reset();
     b7c:	80 91 d8 00 	lds	r24, 0x00D8
     b80:	98 2f       	mov	r25, r24
     b82:	9f 77       	andi	r25, 0x7F	; 127
     b84:	90 93 d8 00 	sts	0x00D8, r25
     b88:	80 68       	ori	r24, 0x80	; 128
     b8a:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
     b8e:	80 91 d7 00 	lds	r24, 0x00D7
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	80 93 d7 00 	sts	0x00D7, r24
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
     b98:	80 91 d8 00 	lds	r24, 0x00D8
     b9c:	8f 7d       	andi	r24, 0xDF	; 223
     b9e:	80 93 d8 00 	sts	0x00D8, r24
			#endif
		}
	}
	#endif

	USB_Attach();
     ba2:	80 91 e0 00 	lds	r24, 0x00E0
     ba6:	8e 7f       	andi	r24, 0xFE	; 254
     ba8:	80 93 e0 00 	sts	0x00E0, r24

		#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
		USB_INT_Enable(USB_INT_VBUS);
		#endif
	#elif defined(USB_HOST_ONLY)
	USB_Host_HostMode_On();
     bac:	80 91 d8 00 	lds	r24, 0x00D8
     bb0:	80 64       	ori	r24, 0x40	; 64
     bb2:	80 93 d8 00 	sts	0x00D8, r24
	
	USB_Host_VBUS_Auto_Off();
     bb6:	80 91 dd 00 	lds	r24, 0x00DD
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	80 93 dd 00 	sts	0x00DD, r24
	USB_OTGPAD_Off();
     bc0:	80 91 d8 00 	lds	r24, 0x00D8
     bc4:	8f 7e       	andi	r24, 0xEF	; 239
     bc6:	80 93 d8 00 	sts	0x00D8, r24

	USB_Host_VBUS_Manual_Enable();
     bca:	80 91 dd 00 	lds	r24, 0x00DD
     bce:	84 60       	ori	r24, 0x04	; 4
     bd0:	80 93 dd 00 	sts	0x00DD, r24
     bd4:	80 91 d7 00 	lds	r24, 0x00D7
     bd8:	8f 7e       	andi	r24, 0xEF	; 239
     bda:	80 93 d7 00 	sts	0x00D7, r24
     bde:	6f 9a       	sbi	0x0d, 7	; 13
	USB_Host_VBUS_Manual_On();
     be0:	77 9a       	sbi	0x0e, 7	; 14
	
	USB_INT_Enable(USB_INT_SRPI);
     be2:	80 91 de 00 	lds	r24, 0x00DE
     be6:	81 60       	ori	r24, 0x01	; 1
     be8:	80 93 de 00 	sts	0x00DE, r24
	USB_INT_Enable(USB_INT_BCERRI);
     bec:	80 91 de 00 	lds	r24, 0x00DE
     bf0:	84 60       	ori	r24, 0x04	; 4
     bf2:	80 93 de 00 	sts	0x00DE, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
     bf6:	08 95       	ret

00000bf8 <USB_ShutDown>:
	sei();
}

void USB_ShutDown(void)
{
	USB_ResetInterface();
     bf8:	b4 df       	rcall	.-152    	; 0xb62 <USB_ResetInterface>
	USB_Detach();
     bfa:	e0 ee       	ldi	r30, 0xE0	; 224
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	81 60       	ori	r24, 0x01	; 1
     c02:	80 83       	st	Z, r24
	USB_Controller_Disable();
     c04:	e8 ed       	ldi	r30, 0xD8	; 216
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	8f 77       	andi	r24, 0x7F	; 127
     c0c:	80 83       	st	Z, r24
	
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	  USB_PLL_Off();
     c0e:	19 bc       	out	0x29, r1	; 41
	
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_Off();
     c10:	80 81       	ld	r24, Z
     c12:	8f 7e       	andi	r24, 0xEF	; 239
     c14:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	UHWCON &= ~(1 << UIDE);
	#endif

	USB_IsInitialized = false;
     c16:	10 92 d6 01 	sts	0x01D6, r1

	#if defined(CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_NONE;
	#endif
}
     c1a:	08 95       	ret

00000c1c <USB_Init>:
	#if !defined(USE_STATIC_OPTIONS)
	USB_Options = Options;
	#endif

	#if defined(USB_CAN_BE_HOST)
	USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	80 93 d0 01 	sts	0x01D0, r24
	#endif
	
	#if defined(USB_DEVICE_ONLY) && (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	UHWCON |= (1 << UIMOD);
	#elif defined(USB_HOST_ONLY)
	UHWCON &= ~(1 << UIMOD);
     c22:	e7 ed       	ldi	r30, 0xD7	; 215
     c24:	f0 e0       	ldi	r31, 0x00	; 0
     c26:	80 81       	ld	r24, Z
     c28:	8f 77       	andi	r24, 0x7F	; 127
     c2a:	80 83       	st	Z, r24
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
     c2c:	9a df       	rcall	.-204    	; 0xb62 <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
     c2e:	e8 ed       	ldi	r30, 0xD8	; 216
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	80 81       	ld	r24, Z
     c34:	80 61       	ori	r24, 0x10	; 16
     c36:	80 83       	st	Z, r24
	#endif

	USB_IsInitialized = true;
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	80 93 d6 01 	sts	0x01D6, r24

	sei();
     c3e:	78 94       	sei
}
     c40:	08 95       	ret

00000c42 <Pipe_ConfigurePipe>:

uint8_t USB_ControlPipeSize = PIPE_CONTROLPIPE_DEFAULT_SIZE;

bool Pipe_ConfigurePipe(const uint8_t Number, const uint8_t Type, const uint8_t Token, const uint8_t EndpointNumber,
						const uint16_t Size, const uint8_t Banks)
{
     c42:	ef 92       	push	r14
     c44:	0f 93       	push	r16
     c46:	1f 93       	push	r17
     c48:	9e 2d       	mov	r25, r14
	Pipe_SelectPipe(Number);
     c4a:	80 93 a7 00 	sts	0x00A7, r24
	Pipe_EnablePipe();
     c4e:	80 91 a9 00 	lds	r24, 0x00A9
     c52:	81 60       	ori	r24, 0x01	; 1
     c54:	80 93 a9 00 	sts	0x00A9, r24

	UPCFG1X = 0;
     c58:	10 92 ab 00 	sts	0x00AB, r1
	
	UPCFG0X = ((Type << EPTYPE0) | Token | ((EndpointNumber & PIPE_EPNUM_MASK) << PEPNUM0));
     c5c:	62 95       	swap	r22
     c5e:	66 0f       	add	r22, r22
     c60:	66 0f       	add	r22, r22
     c62:	60 7c       	andi	r22, 0xC0	; 192
     c64:	64 2b       	or	r22, r20
     c66:	2f 70       	andi	r18, 0x0F	; 15
     c68:	62 2b       	or	r22, r18
     c6a:	60 93 aa 00 	sts	0x00AA, r22

		/* Inline Functions: */
			static inline uint8_t Pipe_BytesToEPSizeMask(uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_BytesToEPSizeMask(uint16_t Bytes)
			{
				if (Bytes <= 8)
     c6e:	09 30       	cpi	r16, 0x09	; 9
     c70:	11 05       	cpc	r17, r1
     c72:	10 f4       	brcc	.+4      	; 0xc78 <Pipe_ConfigurePipe+0x36>
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	15 c0       	rjmp	.+42     	; 0xca2 <Pipe_ConfigurePipe+0x60>
				  return (0 << EPSIZE0);
				else if (Bytes <= 16)
     c78:	01 31       	cpi	r16, 0x11	; 17
     c7a:	11 05       	cpc	r17, r1
     c7c:	10 f4       	brcc	.+4      	; 0xc82 <Pipe_ConfigurePipe+0x40>
     c7e:	80 e1       	ldi	r24, 0x10	; 16
     c80:	10 c0       	rjmp	.+32     	; 0xca2 <Pipe_ConfigurePipe+0x60>
				  return (1 << EPSIZE0);
				else if (Bytes <= 32)
     c82:	01 32       	cpi	r16, 0x21	; 33
     c84:	11 05       	cpc	r17, r1
     c86:	10 f4       	brcc	.+4      	; 0xc8c <Pipe_ConfigurePipe+0x4a>
     c88:	80 e2       	ldi	r24, 0x20	; 32
     c8a:	0b c0       	rjmp	.+22     	; 0xca2 <Pipe_ConfigurePipe+0x60>
				  return (2 << EPSIZE0);
				else if (Bytes <= 64)
     c8c:	01 34       	cpi	r16, 0x41	; 65
     c8e:	11 05       	cpc	r17, r1
     c90:	10 f4       	brcc	.+4      	; 0xc96 <Pipe_ConfigurePipe+0x54>
     c92:	80 e3       	ldi	r24, 0x30	; 48
     c94:	06 c0       	rjmp	.+12     	; 0xca2 <Pipe_ConfigurePipe+0x60>
				  return (3 << EPSIZE0);
				else if (Bytes <= 128)
     c96:	01 38       	cpi	r16, 0x81	; 129
     c98:	11 05       	cpc	r17, r1
     c9a:	10 f0       	brcs	.+4      	; 0xca0 <Pipe_ConfigurePipe+0x5e>
     c9c:	80 e5       	ldi	r24, 0x50	; 80
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <Pipe_ConfigurePipe+0x60>
     ca0:	80 e4       	ldi	r24, 0x40	; 64
	UPCFG1X = ((1 << ALLOC) | Banks | Pipe_BytesToEPSizeMask(Size));
     ca2:	92 60       	ori	r25, 0x02	; 2
     ca4:	98 2b       	or	r25, r24
     ca6:	90 93 ab 00 	sts	0x00AB, r25

	Pipe_SetInfiniteINRequests();
     caa:	80 91 a9 00 	lds	r24, 0x00A9
     cae:	80 62       	ori	r24, 0x20	; 32
     cb0:	80 93 a9 00 	sts	0x00A9, r24

	return Pipe_IsConfigured();
     cb4:	80 91 ac 00 	lds	r24, 0x00AC
}
     cb8:	88 1f       	adc	r24, r24
     cba:	88 27       	eor	r24, r24
     cbc:	88 1f       	adc	r24, r24
     cbe:	1f 91       	pop	r17
     cc0:	0f 91       	pop	r16
     cc2:	ef 90       	pop	r14
     cc4:	08 95       	ret

00000cc6 <Pipe_ClearPipes>:

void Pipe_ClearPipes(void)
{
	UPINT = 0;
     cc6:	10 92 f8 00 	sts	0x00F8, r1
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_ResetPipe(PNum);
     cce:	41 e0       	ldi	r20, 0x01	; 1
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	9a 01       	movw	r18, r20
     cd4:	08 2e       	mov	r0, r24
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <Pipe_ClearPipes+0x16>
     cd8:	22 0f       	add	r18, r18
     cda:	33 1f       	adc	r19, r19
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <Pipe_ClearPipes+0x12>
     ce0:	20 93 a8 00 	sts	0x00A8, r18
     ce4:	10 92 a8 00 	sts	0x00A8, r1
		Pipe_SelectPipe(PNum);
     ce8:	80 93 a7 00 	sts	0x00A7, r24
		UPIENX = 0;
     cec:	10 92 ae 00 	sts	0x00AE, r1
		UPINTX = 0;
     cf0:	10 92 a6 00 	sts	0x00A6, r1
		Pipe_ClearError();
     cf4:	20 91 a6 00 	lds	r18, 0x00A6
     cf8:	2f 7e       	andi	r18, 0xEF	; 239
     cfa:	20 93 a6 00 	sts	0x00A6, r18
		Pipe_ClearErrorFlags();
     cfe:	10 92 f5 00 	sts	0x00F5, r1
		Pipe_DeallocateMemory();
     d02:	20 91 ab 00 	lds	r18, 0x00AB
     d06:	2d 7f       	andi	r18, 0xFD	; 253
     d08:	20 93 ab 00 	sts	0x00AB, r18
		Pipe_DisablePipe();
     d0c:	20 91 a9 00 	lds	r18, 0x00A9
     d10:	2e 7f       	andi	r18, 0xFE	; 254
     d12:	20 93 a9 00 	sts	0x00A9, r18
     d16:	01 96       	adiw	r24, 0x01	; 1

void Pipe_ClearPipes(void)
{
	UPINT = 0;

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d18:	87 30       	cpi	r24, 0x07	; 7
     d1a:	91 05       	cpc	r25, r1
     d1c:	d1 f6       	brne	.-76     	; 0xcd2 <Pipe_ClearPipes+0xc>
		Pipe_ClearError();
		Pipe_ClearErrorFlags();
		Pipe_DeallocateMemory();
		Pipe_DisablePipe();
	}
}
     d1e:	08 95       	ret

00000d20 <Pipe_IsEndpointBound>:

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();
     d20:	20 91 a7 00 	lds	r18, 0x00A7
     d24:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
		
		if (Pipe_IsConfigured() && (Pipe_BoundEndpointNumber() == EndpointAddress))
     d26:	68 2f       	mov	r22, r24
     d28:	70 e0       	ldi	r23, 0x00	; 0
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
	{
		Pipe_SelectPipe(PNum);
     d2a:	90 93 a7 00 	sts	0x00A7, r25
		
		if (Pipe_IsConfigured() && (Pipe_BoundEndpointNumber() == EndpointAddress))
     d2e:	80 91 ac 00 	lds	r24, 0x00AC
     d32:	87 ff       	sbrs	r24, 7
     d34:	0a c0       	rjmp	.+20     	; 0xd4a <Pipe_IsEndpointBound+0x2a>
     d36:	40 91 aa 00 	lds	r20, 0x00AA
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	4f 70       	andi	r20, 0x0F	; 15
     d3e:	50 70       	andi	r21, 0x00	; 0
     d40:	46 17       	cp	r20, r22
     d42:	57 07       	cpc	r21, r23
     d44:	11 f4       	brne	.+4      	; 0xd4a <Pipe_IsEndpointBound+0x2a>
     d46:	81 e0       	ldi	r24, 0x01	; 1
     d48:	08 95       	ret

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();

	for (uint8_t PNum = 0; PNum < PIPE_TOTAL_PIPES; PNum++)
     d4a:	9f 5f       	subi	r25, 0xFF	; 255
     d4c:	97 30       	cpi	r25, 0x07	; 7
     d4e:	69 f7       	brne	.-38     	; 0xd2a <Pipe_IsEndpointBound+0xa>
	}
}

bool Pipe_IsEndpointBound(const uint8_t EndpointAddress)
{
	uint8_t PrevPipeNumber = Pipe_GetCurrentPipe();
     d50:	27 70       	andi	r18, 0x07	; 7
		
		if (Pipe_IsConfigured() && (Pipe_BoundEndpointNumber() == EndpointAddress))
		  return true;
	}
	
	Pipe_SelectPipe(PrevPipeNumber);
     d52:	20 93 a7 00 	sts	0x00A7, r18
     d56:	80 e0       	ldi	r24, 0x00	; 0
	return false;
}
     d58:	08 95       	ret

00000d5a <Pipe_WaitUntilReady>:

uint8_t Pipe_WaitUntilReady(void)
{
     d5a:	84 e6       	ldi	r24, 0x64	; 100
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif
	
	for (;;)
	{
		if (Pipe_GetPipeToken() == PIPE_TOKEN_IN)
     d5c:	90 91 aa 00 	lds	r25, 0x00AA
     d60:	90 73       	andi	r25, 0x30	; 48
     d62:	90 31       	cpi	r25, 0x10	; 16
     d64:	29 f4       	brne	.+10     	; 0xd70 <Pipe_WaitUntilReady+0x16>
		{
			if (Pipe_IsINReceived())
     d66:	90 91 a6 00 	lds	r25, 0x00A6
     d6a:	90 ff       	sbrs	r25, 0
     d6c:	05 c0       	rjmp	.+10     	; 0xd78 <Pipe_WaitUntilReady+0x1e>
     d6e:	1f c0       	rjmp	.+62     	; 0xdae <Pipe_WaitUntilReady+0x54>
			  return PIPE_READYWAIT_NoError;
		}
		else
		{
			if (Pipe_IsOUTReady())
     d70:	90 91 a6 00 	lds	r25, 0x00A6
     d74:	92 fd       	sbrc	r25, 2
     d76:	1b c0       	rjmp	.+54     	; 0xdae <Pipe_WaitUntilReady+0x54>
			  return PIPE_READYWAIT_NoError;		
		}

		if (Pipe_IsStalled())
     d78:	90 91 a6 00 	lds	r25, 0x00A6
     d7c:	91 ff       	sbrs	r25, 1
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <Pipe_WaitUntilReady+0x2a>
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	08 95       	ret
		  return PIPE_READYWAIT_PipeStalled;
		else if (USB_HostState == HOST_STATE_Unattached)
     d84:	90 91 df 01 	lds	r25, 0x01DF
     d88:	92 30       	cpi	r25, 0x02	; 2
     d8a:	11 f4       	brne	.+4      	; 0xd90 <Pipe_WaitUntilReady+0x36>
     d8c:	82 e0       	ldi	r24, 0x02	; 2
     d8e:	08 95       	ret
		  return PIPE_READYWAIT_DeviceDisconnected;
			  
		if (USB_INT_HasOccurred(USB_INT_HSOFI))
     d90:	90 91 9f 00 	lds	r25, 0x009F
     d94:	95 ff       	sbrs	r25, 5
     d96:	e2 cf       	rjmp	.-60     	; 0xd5c <Pipe_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_HSOFI);
     d98:	90 91 9f 00 	lds	r25, 0x009F
     d9c:	9f 7d       	andi	r25, 0xDF	; 223
     d9e:	90 93 9f 00 	sts	0x009F, r25

			if (!(TimeoutMSRem--))
     da2:	88 23       	and	r24, r24
     da4:	11 f4       	brne	.+4      	; 0xdaa <Pipe_WaitUntilReady+0x50>
     da6:	83 e0       	ldi	r24, 0x03	; 3
     da8:	08 95       	ret
     daa:	81 50       	subi	r24, 0x01	; 1
     dac:	d7 cf       	rjmp	.-82     	; 0xd5c <Pipe_WaitUntilReady+0x2>
     dae:	80 e0       	ldi	r24, 0x00	; 0
			  return PIPE_READYWAIT_Timeout;
		}
	}
}
     db0:	08 95       	ret

00000db2 <Pipe_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
     db2:	af 92       	push	r10
     db4:	bf 92       	push	r11
     db6:	cf 92       	push	r12
     db8:	df 92       	push	r13
     dba:	ef 92       	push	r14
     dbc:	ff 92       	push	r15
     dbe:	0f 93       	push	r16
     dc0:	1f 93       	push	r17
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	0f 92       	push	r0
     dc8:	cd b7       	in	r28, 0x3d	; 61
     dca:	de b7       	in	r29, 0x3e	; 62
     dcc:	18 2f       	mov	r17, r24
     dce:	5b 01       	movw	r10, r22
     dd0:	6a 01       	movw	r12, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	Pipe_SetToken(TEMPLATE_TOKEN);
     dd2:	80 91 aa 00 	lds	r24, 0x00AA
     dd6:	8f 7c       	andi	r24, 0xCF	; 207
     dd8:	80 62       	ori	r24, 0x20	; 32
     dda:	80 93 aa 00 	sts	0x00AA, r24

	if ((ErrorCode = Pipe_WaitUntilReady()))
     dde:	99 83       	std	Y+1, r25	; 0x01
     de0:	bc df       	rcall	.-136    	; 0xd5a <Pipe_WaitUntilReady>
     de2:	08 2f       	mov	r16, r24
     de4:	99 81       	ldd	r25, Y+1	; 0x01
     de6:	88 23       	and	r24, r24
     de8:	41 f5       	brne	.+80     	; 0xe3a <Pipe_Write_Stream_LE+0x88>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     dea:	e1 2e       	mov	r14, r17
     dec:	f9 2e       	mov	r15, r25
     dee:	22 c0       	rjmp	.+68     	; 0xe34 <Pipe_Write_Stream_LE+0x82>
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     df0:	80 91 a6 00 	lds	r24, 0x00A6
     df4:	85 fd       	sbrc	r24, 5
     df6:	16 c0       	rjmp	.+44     	; 0xe24 <Pipe_Write_Stream_LE+0x72>
		{
			TEMPLATE_CLEAR_PIPE();
     df8:	80 91 a6 00 	lds	r24, 0x00A6
     dfc:	98 2f       	mov	r25, r24
     dfe:	9b 7f       	andi	r25, 0xFB	; 251
     e00:	90 93 a6 00 	sts	0x00A6, r25
     e04:	8f 77       	andi	r24, 0x7F	; 127
     e06:	80 93 a6 00 	sts	0x00A6, r24

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     e0a:	c1 14       	cp	r12, r1
     e0c:	d1 04       	cpc	r13, r1
     e0e:	31 f0       	breq	.+12     	; 0xe1c <Pipe_Write_Stream_LE+0x6a>
     e10:	f6 01       	movw	r30, r12
     e12:	09 95       	icall
     e14:	81 30       	cpi	r24, 0x01	; 1
     e16:	11 f4       	brne	.+4      	; 0xe1c <Pipe_Write_Stream_LE+0x6a>
     e18:	84 e0       	ldi	r24, 0x04	; 4
     e1a:	10 c0       	rjmp	.+32     	; 0xe3c <Pipe_Write_Stream_LE+0x8a>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
     e1c:	9e df       	rcall	.-196    	; 0xd5a <Pipe_WaitUntilReady>
     e1e:	88 23       	and	r24, r24
     e20:	49 f0       	breq	.+18     	; 0xe34 <Pipe_Write_Stream_LE+0x82>
     e22:	0c c0       	rjmp	.+24     	; 0xe3c <Pipe_Write_Stream_LE+0x8a>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     e24:	f7 01       	movw	r30, r14
     e26:	81 91       	ld	r24, Z+
     e28:	7f 01       	movw	r14, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected pipe's FIFO buffer
			 */
			static inline void Pipe_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Pipe_Write_Byte(const uint8_t Byte)
			{
				UPDATX = Byte;
     e2a:	80 93 af 00 	sts	0x00AF, r24
			Length--;
     e2e:	08 94       	sec
     e30:	a1 08       	sbc	r10, r1
     e32:	b1 08       	sbc	r11, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
     e34:	a1 14       	cp	r10, r1
     e36:	b1 04       	cpc	r11, r1
     e38:	d9 f6       	brne	.-74     	; 0xdf0 <Pipe_Write_Stream_LE+0x3e>
     e3a:	80 2f       	mov	r24, r16
			Length--;
		}
	}
	
	return PIPE_RWSTREAM_NoError;
}
     e3c:	0f 90       	pop	r0
     e3e:	cf 91       	pop	r28
     e40:	df 91       	pop	r29
     e42:	1f 91       	pop	r17
     e44:	0f 91       	pop	r16
     e46:	ff 90       	pop	r15
     e48:	ef 90       	pop	r14
     e4a:	df 90       	pop	r13
     e4c:	cf 90       	pop	r12
     e4e:	bf 90       	pop	r11
     e50:	af 90       	pop	r10
     e52:	08 95       	ret

00000e54 <Pipe_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
     e54:	af 92       	push	r10
     e56:	bf 92       	push	r11
     e58:	cf 92       	push	r12
     e5a:	df 92       	push	r13
     e5c:	ef 92       	push	r14
     e5e:	ff 92       	push	r15
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	0f 92       	push	r0
     e6a:	cd b7       	in	r28, 0x3d	; 61
     e6c:	de b7       	in	r29, 0x3e	; 62
     e6e:	18 2f       	mov	r17, r24
     e70:	5b 01       	movw	r10, r22
     e72:	6a 01       	movw	r12, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	Pipe_SetToken(TEMPLATE_TOKEN);
     e74:	80 91 aa 00 	lds	r24, 0x00AA
     e78:	8f 7c       	andi	r24, 0xCF	; 207
     e7a:	80 61       	ori	r24, 0x10	; 16
     e7c:	80 93 aa 00 	sts	0x00AA, r24

	if ((ErrorCode = Pipe_WaitUntilReady()))
     e80:	99 83       	std	Y+1, r25	; 0x01
     e82:	6b df       	rcall	.-298    	; 0xd5a <Pipe_WaitUntilReady>
     e84:	08 2f       	mov	r16, r24
     e86:	99 81       	ldd	r25, Y+1	; 0x01
     e88:	88 23       	and	r24, r24
     e8a:	41 f5       	brne	.+80     	; 0xedc <Pipe_Read_Stream_LE+0x88>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     e8c:	e1 2e       	mov	r14, r17
     e8e:	f9 2e       	mov	r15, r25
     e90:	22 c0       	rjmp	.+68     	; 0xed6 <Pipe_Read_Stream_LE+0x82>
	}
	#endif

	while (Length)
	{
		if (!(Pipe_IsReadWriteAllowed()))
     e92:	80 91 a6 00 	lds	r24, 0x00A6
     e96:	85 fd       	sbrc	r24, 5
     e98:	16 c0       	rjmp	.+44     	; 0xec6 <Pipe_Read_Stream_LE+0x72>
		{
			TEMPLATE_CLEAR_PIPE();
     e9a:	80 91 a6 00 	lds	r24, 0x00A6
     e9e:	98 2f       	mov	r25, r24
     ea0:	9e 7f       	andi	r25, 0xFE	; 254
     ea2:	90 93 a6 00 	sts	0x00A6, r25
     ea6:	8f 77       	andi	r24, 0x7F	; 127
     ea8:	80 93 a6 00 	sts	0x00A6, r24

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
     eac:	c1 14       	cp	r12, r1
     eae:	d1 04       	cpc	r13, r1
     eb0:	31 f0       	breq	.+12     	; 0xebe <Pipe_Read_Stream_LE+0x6a>
     eb2:	f6 01       	movw	r30, r12
     eb4:	09 95       	icall
     eb6:	81 30       	cpi	r24, 0x01	; 1
     eb8:	11 f4       	brne	.+4      	; 0xebe <Pipe_Read_Stream_LE+0x6a>
     eba:	84 e0       	ldi	r24, 0x04	; 4
     ebc:	10 c0       	rjmp	.+32     	; 0xede <Pipe_Read_Stream_LE+0x8a>
			  return PIPE_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Pipe_WaitUntilReady()))
     ebe:	4d df       	rcall	.-358    	; 0xd5a <Pipe_WaitUntilReady>
     ec0:	88 23       	and	r24, r24
     ec2:	49 f0       	breq	.+18     	; 0xed6 <Pipe_Read_Stream_LE+0x82>
     ec4:	0c c0       	rjmp	.+24     	; 0xede <Pipe_Read_Stream_LE+0x8a>
			 *  \return Next byte in the currently selected pipe's FIFO buffer
			 */
			static inline uint8_t Pipe_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Pipe_Read_Byte(void)
			{
				return UPDATX;
     ec6:	80 91 af 00 	lds	r24, 0x00AF
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
     eca:	f7 01       	movw	r30, r14
     ecc:	81 93       	st	Z+, r24
     ece:	7f 01       	movw	r14, r30
			Length--;
     ed0:	08 94       	sec
     ed2:	a1 08       	sbc	r10, r1
     ed4:	b1 08       	sbc	r11, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
     ed6:	a1 14       	cp	r10, r1
     ed8:	b1 04       	cpc	r11, r1
     eda:	d9 f6       	brne	.-74     	; 0xe92 <Pipe_Read_Stream_LE+0x3e>
     edc:	80 2f       	mov	r24, r16
			Length--;
		}
	}
	
	return PIPE_RWSTREAM_NoError;
}
     ede:	0f 90       	pop	r0
     ee0:	cf 91       	pop	r28
     ee2:	df 91       	pop	r29
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	08 95       	ret

00000ef6 <USB_INT_DisableAllInterrupts>:
#include "USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
     ef6:	e8 ed       	ldi	r30, 0xD8	; 216
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	8c 7f       	andi	r24, 0xFC	; 252
     efe:	80 83       	st	Z, r24
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);					
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
     f00:	10 92 a0 00 	sts	0x00A0, r1
	OTGIEN  = 0;
     f04:	10 92 de 00 	sts	0x00DE, r1
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
	#endif
}
     f08:	08 95       	ret

00000f0a <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
     f0a:	10 92 da 00 	sts	0x00DA, r1
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	UHINT   = 0;
     f0e:	10 92 9f 00 	sts	0x009F, r1
	OTGINT  = 0;
     f12:	10 92 df 00 	sts	0x00DF, r1
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
	#endif
}
     f16:	08 95       	ret

00000f18 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
     f18:	1f 92       	push	r1
     f1a:	0f 92       	push	r0
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	0f 92       	push	r0
     f20:	0b b6       	in	r0, 0x3b	; 59
     f22:	0f 92       	push	r0
     f24:	11 24       	eor	r1, r1
     f26:	2f 93       	push	r18
     f28:	3f 93       	push	r19
     f2a:	4f 93       	push	r20
     f2c:	5f 93       	push	r21
     f2e:	6f 93       	push	r22
     f30:	7f 93       	push	r23
     f32:	8f 93       	push	r24
     f34:	9f 93       	push	r25
     f36:	af 93       	push	r26
     f38:	bf 93       	push	r27
     f3a:	ef 93       	push	r30
     f3c:	ff 93       	push	r31
		EVENT_USB_Device_StartOfFrame();
	}
	#endif
	
	#if defined(USB_CAN_BE_HOST)
	if (USB_INT_HasOccurred(USB_INT_DDISCI) && USB_INT_IsEnabled(USB_INT_DDISCI))
     f3e:	80 91 9f 00 	lds	r24, 0x009F
     f42:	81 ff       	sbrs	r24, 1
     f44:	15 c0       	rjmp	.+42     	; 0xf70 <__vector_10+0x58>
     f46:	80 91 a0 00 	lds	r24, 0x00A0
     f4a:	81 ff       	sbrs	r24, 1
     f4c:	11 c0       	rjmp	.+34     	; 0xf70 <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_DDISCI);
     f4e:	80 91 9f 00 	lds	r24, 0x009F
     f52:	8d 7f       	andi	r24, 0xFD	; 253
     f54:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Clear(USB_INT_DCONNI);
     f58:	80 91 9f 00 	lds	r24, 0x009F
     f5c:	8e 7f       	andi	r24, 0xFE	; 254
     f5e:	80 93 9f 00 	sts	0x009F, r24
		USB_INT_Disable(USB_INT_DDISCI);
     f62:	80 91 a0 00 	lds	r24, 0x00A0
     f66:	8d 7f       	andi	r24, 0xFD	; 253
     f68:	80 93 a0 00 	sts	0x00A0, r24
			
		EVENT_USB_Host_DeviceUnattached();
     f6c:	89 d9       	rcall	.-3310   	; 0x280 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     f6e:	f9 dd       	rcall	.-1038   	; 0xb62 <USB_ResetInterface>
	}
	
	if (USB_INT_HasOccurred(USB_INT_VBERRI) && USB_INT_IsEnabled(USB_INT_VBERRI))
     f70:	80 91 df 00 	lds	r24, 0x00DF
     f74:	81 ff       	sbrs	r24, 1
     f76:	15 c0       	rjmp	.+42     	; 0xfa2 <__vector_10+0x8a>
     f78:	80 91 de 00 	lds	r24, 0x00DE
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	11 c0       	rjmp	.+34     	; 0xfa2 <__vector_10+0x8a>
	{
		USB_INT_Clear(USB_INT_VBERRI);
     f80:	80 91 df 00 	lds	r24, 0x00DF
     f84:	8d 7f       	andi	r24, 0xFD	; 253
     f86:	80 93 df 00 	sts	0x00DF, r24

		USB_Host_VBUS_Manual_Off();
     f8a:	77 98       	cbi	0x0e, 7	; 14
		USB_Host_VBUS_Auto_Off();
     f8c:	80 91 dd 00 	lds	r24, 0x00DD
     f90:	81 60       	ori	r24, 0x01	; 1
     f92:	80 93 dd 00 	sts	0x00DD, r24

		EVENT_USB_Host_HostError(HOST_ERROR_VBusVoltageDip);
     f96:	80 e0       	ldi	r24, 0x00	; 0
     f98:	51 d9       	rcall	.-3422   	; 0x23c <EVENT_USB_Host_HostError>
		EVENT_USB_Host_DeviceUnattached();
     f9a:	72 d9       	rcall	.-3356   	; 0x280 <EVENT_USB_Host_DeviceUnattached>

		USB_HostState = HOST_STATE_Unattached;
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	80 93 df 01 	sts	0x01DF, r24
	}

	if (USB_INT_HasOccurred(USB_INT_SRPI) && USB_INT_IsEnabled(USB_INT_SRPI))
     fa2:	80 91 df 00 	lds	r24, 0x00DF
     fa6:	80 ff       	sbrs	r24, 0
     fa8:	17 c0       	rjmp	.+46     	; 0xfd8 <__vector_10+0xc0>
     faa:	80 91 de 00 	lds	r24, 0x00DE
     fae:	80 ff       	sbrs	r24, 0
     fb0:	13 c0       	rjmp	.+38     	; 0xfd8 <__vector_10+0xc0>
	{
		USB_INT_Clear(USB_INT_SRPI);
     fb2:	80 91 df 00 	lds	r24, 0x00DF
     fb6:	8e 7f       	andi	r24, 0xFE	; 254
     fb8:	80 93 df 00 	sts	0x00DF, r24
		USB_INT_Disable(USB_INT_SRPI);
     fbc:	80 91 de 00 	lds	r24, 0x00DE
     fc0:	8e 7f       	andi	r24, 0xFE	; 254
     fc2:	80 93 de 00 	sts	0x00DE, r24
	
		EVENT_USB_Host_DeviceAttached();
     fc6:	65 d9       	rcall	.-3382   	; 0x292 <EVENT_USB_Host_DeviceAttached>

		USB_INT_Enable(USB_INT_DDISCI);
     fc8:	80 91 a0 00 	lds	r24, 0x00A0
     fcc:	82 60       	ori	r24, 0x02	; 2
     fce:	80 93 a0 00 	sts	0x00A0, r24
		
		USB_HostState = HOST_STATE_Powered;
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	80 93 df 01 	sts	0x01DF, r24
	}

	if (USB_INT_HasOccurred(USB_INT_BCERRI) && USB_INT_IsEnabled(USB_INT_BCERRI))
     fd8:	80 91 df 00 	lds	r24, 0x00DF
     fdc:	82 ff       	sbrs	r24, 2
     fde:	0e c0       	rjmp	.+28     	; 0xffc <__vector_10+0xe4>
     fe0:	80 91 de 00 	lds	r24, 0x00DE
     fe4:	82 ff       	sbrs	r24, 2
     fe6:	0a c0       	rjmp	.+20     	; 0xffc <__vector_10+0xe4>
	{
		USB_INT_Clear(USB_INT_BCERRI);
     fe8:	80 91 df 00 	lds	r24, 0x00DF
     fec:	8b 7f       	andi	r24, 0xFB	; 251
     fee:	80 93 df 00 	sts	0x00DF, r24
		
		EVENT_USB_Host_DeviceEnumerationFailed(HOST_ENUMERROR_NoDeviceDetected, 0);
     ff2:	82 e0       	ldi	r24, 0x02	; 2
     ff4:	60 e0       	ldi	r22, 0x00	; 0
     ff6:	f6 d8       	rcall	.-3604   	; 0x1e4 <EVENT_USB_Host_DeviceEnumerationFailed>
		EVENT_USB_Host_DeviceUnattached();
     ff8:	43 d9       	rcall	.-3450   	; 0x280 <EVENT_USB_Host_DeviceUnattached>

		USB_ResetInterface();
     ffa:	b3 dd       	rcall	.-1178   	; 0xb62 <USB_ResetInterface>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
     ffc:	ff 91       	pop	r31
     ffe:	ef 91       	pop	r30
    1000:	bf 91       	pop	r27
    1002:	af 91       	pop	r26
    1004:	9f 91       	pop	r25
    1006:	8f 91       	pop	r24
    1008:	7f 91       	pop	r23
    100a:	6f 91       	pop	r22
    100c:	5f 91       	pop	r21
    100e:	4f 91       	pop	r20
    1010:	3f 91       	pop	r19
    1012:	2f 91       	pop	r18
    1014:	0f 90       	pop	r0
    1016:	0b be       	out	0x3b, r0	; 59
    1018:	0f 90       	pop	r0
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	0f 90       	pop	r0
    101e:	1f 90       	pop	r1
    1020:	18 95       	reti

00001022 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    1022:	1f 93       	push	r17
    1024:	cf 93       	push	r28
    1026:	df 93       	push	r29
#endif

#if defined(USB_CAN_BE_HOST)
static void USB_HostTask(void)
{
	uint8_t PrevPipe = Pipe_GetCurrentPipe();
    1028:	c7 ea       	ldi	r28, 0xA7	; 167
    102a:	d0 e0       	ldi	r29, 0x00	; 0
    102c:	18 81       	ld	r17, Y
    102e:	17 70       	andi	r17, 0x07	; 7
	
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
    1030:	18 82       	st	Y, r1

	USB_Host_ProcessNextHostState();
    1032:	24 db       	rcall	.-2488   	; 0x67c <USB_Host_ProcessNextHostState>
	
	Pipe_SelectPipe(PrevPipe);
    1034:	18 83       	st	Y, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	1f 91       	pop	r17
    103c:	08 95       	ret

0000103e <USB_GetNextDescriptorComp>:
			
uint8_t USB_GetNextDescriptorComp(uint16_t* BytesRem, void** CurrConfigLoc, ConfigComparatorPtr_t ComparatorRoutine)
{
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	ec 01       	movw	r28, r24
    1054:	8b 01       	movw	r16, r22
    1056:	5a 01       	movw	r10, r20
	uint8_t ErrorCode;
		
	while (*BytesRem)
    1058:	1d c0       	rjmp	.+58     	; 0x1094 <USB_GetNextDescriptorComp+0x56>
	{
		uint8_t*  PrevDescLoc  = *CurrConfigLoc;
    105a:	f8 01       	movw	r30, r16
    105c:	e0 80       	ld	r14, Z
    105e:	f1 80       	ldd	r15, Z+1	; 0x01
			                                         void** const CurrConfigLoc) 
			                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);									  
			static inline void USB_GetNextDescriptor(uint16_t* const BytesRem,
			                                         void** const CurrConfigLoc)
			{
				uint16_t CurrDescriptorSize = DESCRIPTOR_CAST(*CurrConfigLoc, USB_Descriptor_Header_t).Size;
    1060:	f7 01       	movw	r30, r14
    1062:	20 81       	ld	r18, Z
    1064:	30 e0       	ldi	r19, 0x00	; 0

				*((uint8_t**)CurrConfigLoc) += CurrDescriptorSize;
    1066:	c7 01       	movw	r24, r14
    1068:	82 0f       	add	r24, r18
    106a:	93 1f       	adc	r25, r19
    106c:	f8 01       	movw	r30, r16
    106e:	91 83       	std	Z+1, r25	; 0x01
    1070:	80 83       	st	Z, r24
				*BytesRem                   -= CurrDescriptorSize;
    1072:	a6 01       	movw	r20, r12
    1074:	42 1b       	sub	r20, r18
    1076:	53 0b       	sbc	r21, r19
    1078:	59 83       	std	Y+1, r21	; 0x01
    107a:	48 83       	st	Y, r20
		uint16_t  PrevBytesRem = *BytesRem;

		USB_GetNextDescriptor(BytesRem, CurrConfigLoc);

		if ((ErrorCode = ComparatorRoutine(*CurrConfigLoc)) != DESCRIPTOR_SEARCH_NotFound)
    107c:	f5 01       	movw	r30, r10
    107e:	09 95       	icall
    1080:	82 30       	cpi	r24, 0x02	; 2
    1082:	41 f0       	breq	.+16     	; 0x1094 <USB_GetNextDescriptorComp+0x56>
		{
			if (ErrorCode == DESCRIPTOR_SEARCH_Fail)
    1084:	81 30       	cpi	r24, 0x01	; 1
    1086:	61 f4       	brne	.+24     	; 0x10a0 <USB_GetNextDescriptorComp+0x62>
			{
				*CurrConfigLoc = PrevDescLoc;
    1088:	f8 01       	movw	r30, r16
    108a:	e0 82       	st	Z, r14
    108c:	f1 82       	std	Z+1, r15	; 0x01
				*BytesRem      = PrevBytesRem;
    108e:	d9 82       	std	Y+1, r13	; 0x01
    1090:	c8 82       	st	Y, r12
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <USB_GetNextDescriptorComp+0x62>
			
uint8_t USB_GetNextDescriptorComp(uint16_t* BytesRem, void** CurrConfigLoc, ConfigComparatorPtr_t ComparatorRoutine)
{
	uint8_t ErrorCode;
		
	while (*BytesRem)
    1094:	c8 80       	ld	r12, Y
    1096:	d9 80       	ldd	r13, Y+1	; 0x01
    1098:	c1 14       	cp	r12, r1
    109a:	d1 04       	cpc	r13, r1
    109c:	f1 f6       	brne	.-68     	; 0x105a <USB_GetNextDescriptorComp+0x1c>
    109e:	82 e0       	ldi	r24, 0x02	; 2
			return ErrorCode;
		}
	}
	
	return DESCRIPTOR_SEARCH_COMP_EndOfDescriptor;
}
    10a0:	df 91       	pop	r29
    10a2:	cf 91       	pop	r28
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	df 90       	pop	r13
    10ae:	cf 90       	pop	r12
    10b0:	bf 90       	pop	r11
    10b2:	af 90       	pop	r10
    10b4:	08 95       	ret

000010b6 <USB_Host_GetDeviceConfigDescriptor>:
#include "ConfigDescriptor.h"

#if defined(USB_CAN_BE_HOST)
uint8_t USB_Host_GetDeviceConfigDescriptor(uint8_t ConfigNumber, uint16_t* const ConfigSizePtr,
                                           void* BufferPtr, uint16_t BufferSize)
{
    10b6:	cf 92       	push	r12
    10b8:	df 92       	push	r13
    10ba:	ef 92       	push	r14
    10bc:	ff 92       	push	r15
    10be:	0f 93       	push	r16
    10c0:	1f 93       	push	r17
    10c2:	df 93       	push	r29
    10c4:	cf 93       	push	r28
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	29 97       	sbiw	r28, 0x09	; 9
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	8b 01       	movw	r16, r22
    10d8:	7a 01       	movw	r14, r20
    10da:	69 01       	movw	r12, r18
	uint8_t ErrorCode;
	uint8_t ConfigHeader[sizeof(USB_Descriptor_Configuration_Header_t)];

	USB_ControlRequest = (USB_Request_Header_t)
    10dc:	90 e8       	ldi	r25, 0x80	; 128
    10de:	90 93 d7 01 	sts	0x01D7, r25
    10e2:	96 e0       	ldi	r25, 0x06	; 6
    10e4:	90 93 d8 01 	sts	0x01D8, r25
    10e8:	90 e0       	ldi	r25, 0x00	; 0
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	92 60       	ori	r25, 0x02	; 2
    10ee:	90 93 da 01 	sts	0x01DA, r25
    10f2:	80 93 d9 01 	sts	0x01D9, r24
    10f6:	10 92 dc 01 	sts	0x01DC, r1
    10fa:	10 92 db 01 	sts	0x01DB, r1
    10fe:	89 e0       	ldi	r24, 0x09	; 9
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	90 93 de 01 	sts	0x01DE, r25
    1106:	80 93 dd 01 	sts	0x01DD, r24
			.wValue        = ((DTYPE_Configuration << 8) | (ConfigNumber - 1)),
			.wIndex        = 0,
			.wLength       = sizeof(USB_Descriptor_Configuration_Header_t),
		};
	
	Pipe_SelectPipe(PIPE_CONTROLPIPE);
    110a:	10 92 a7 00 	sts	0x00A7, r1

	if ((ErrorCode = USB_Host_SendControlRequest(ConfigHeader)) != HOST_SENDCONTROL_Successful)
    110e:	ce 01       	movw	r24, r28
    1110:	01 96       	adiw	r24, 0x01	; 1
    1112:	1c dc       	rcall	.-1992   	; 0x94c <USB_Host_SendControlRequest>
    1114:	88 23       	and	r24, r24
    1116:	b9 f4       	brne	.+46     	; 0x1146 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	*ConfigSizePtr = DESCRIPTOR_CAST(ConfigHeader, USB_Descriptor_Configuration_Header_t).TotalConfigurationSize;
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	f8 01       	movw	r30, r16
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	80 83       	st	Z, r24

	if (*ConfigSizePtr > BufferSize)
    1122:	c8 16       	cp	r12, r24
    1124:	d9 06       	cpc	r13, r25
    1126:	10 f4       	brcc	.+4      	; 0x112c <USB_Host_GetDeviceConfigDescriptor+0x76>
    1128:	85 e0       	ldi	r24, 0x05	; 5
    112a:	0d c0       	rjmp	.+26     	; 0x1146 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return HOST_GETCONFIG_BuffOverflow;
	  
	USB_ControlRequest.wLength = *ConfigSizePtr;
    112c:	90 93 de 01 	sts	0x01DE, r25
    1130:	80 93 dd 01 	sts	0x01DD, r24
	
	if ((ErrorCode = USB_Host_SendControlRequest(BufferPtr)) != HOST_SENDCONTROL_Successful)
    1134:	c7 01       	movw	r24, r14
    1136:	0a dc       	rcall	.-2028   	; 0x94c <USB_Host_SendControlRequest>
    1138:	88 23       	and	r24, r24
    113a:	29 f4       	brne	.+10     	; 0x1146 <USB_Host_GetDeviceConfigDescriptor+0x90>
	  return ErrorCode;

	if (DESCRIPTOR_TYPE(BufferPtr) != DTYPE_Configuration)
    113c:	f7 01       	movw	r30, r14
    113e:	91 81       	ldd	r25, Z+1	; 0x01
    1140:	92 30       	cpi	r25, 0x02	; 2
    1142:	09 f0       	breq	.+2      	; 0x1146 <USB_Host_GetDeviceConfigDescriptor+0x90>
    1144:	86 e0       	ldi	r24, 0x06	; 6
	  return HOST_GETCONFIG_InvalidData;
	
	return HOST_GETCONFIG_Successful;
}
    1146:	29 96       	adiw	r28, 0x09	; 9
    1148:	0f b6       	in	r0, 0x3f	; 63
    114a:	f8 94       	cli
    114c:	de bf       	out	0x3e, r29	; 62
    114e:	0f be       	out	0x3f, r0	; 63
    1150:	cd bf       	out	0x3d, r28	; 61
    1152:	cf 91       	pop	r28
    1154:	df 91       	pop	r29
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	ff 90       	pop	r15
    115c:	ef 90       	pop	r14
    115e:	df 90       	pop	r13
    1160:	cf 90       	pop	r12
    1162:	08 95       	ret

00001164 <DComp_MIDI_Host_NextMIDIStreamingInterface>:
	MIDIInterfaceInfo->State.IsActive = true;
	return MIDI_ENUMERROR_NoError;
}

static uint8_t DComp_MIDI_Host_NextMIDIStreamingInterface(void* const CurrentDescriptor)
{
    1164:	fc 01       	movw	r30, r24
	if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Interface)
    1166:	81 81       	ldd	r24, Z+1	; 0x01
    1168:	84 30       	cpi	r24, 0x04	; 4
    116a:	41 f4       	brne	.+16     	; 0x117c <DComp_MIDI_Host_NextMIDIStreamingInterface+0x18>
	{
		USB_Descriptor_Interface_t* CurrentInterface = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                                USB_Descriptor_Interface_t);

		if ((CurrentInterface->Class    == MIDI_STREAMING_CLASS)    &&
    116c:	85 81       	ldd	r24, Z+5	; 0x05
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	29 f4       	brne	.+10     	; 0x117c <DComp_MIDI_Host_NextMIDIStreamingInterface+0x18>
		    (CurrentInterface->SubClass == MIDI_STREAMING_SUBCLASS) &&
    1172:	86 81       	ldd	r24, Z+6	; 0x06
    1174:	83 30       	cpi	r24, 0x03	; 3
    1176:	11 f4       	brne	.+4      	; 0x117c <DComp_MIDI_Host_NextMIDIStreamingInterface+0x18>
		    (CurrentInterface->Protocol == MIDI_STREAMING_PROTOCOL))
    1178:	87 81       	ldd	r24, Z+7	; 0x07
    117a:	81 11       	cpse	r24, r1
    117c:	82 e0       	ldi	r24, 0x02	; 2
			return DESCRIPTOR_SEARCH_Found;
		}
	}
	
	return DESCRIPTOR_SEARCH_NotFound;
}
    117e:	08 95       	ret

00001180 <MIDI_Host_USBTask>:
}

void MIDI_Host_USBTask(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo)
{

}
    1180:	08 95       	ret

00001182 <MIDI_Host_ReceiveEventPacket>:
	
	return PIPE_RWSTREAM_NoError;
}

bool MIDI_Host_ReceiveEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo, MIDI_EventPacket_t* const Event)
{
    1182:	fc 01       	movw	r30, r24
    1184:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    1186:	20 91 df 01 	lds	r18, 0x01DF
    118a:	2c 30       	cpi	r18, 0x0C	; 12
    118c:	e1 f4       	brne	.+56     	; 0x11c6 <MIDI_Host_ReceiveEventPacket+0x44>
    118e:	24 81       	ldd	r18, Z+4	; 0x04
    1190:	22 23       	and	r18, r18
    1192:	c9 f0       	breq	.+50     	; 0x11c6 <MIDI_Host_ReceiveEventPacket+0x44>
	  return HOST_SENDCONTROL_DeviceDisconnect;
	
	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataINPipeNumber);
    1194:	20 81       	ld	r18, Z
    1196:	20 93 a7 00 	sts	0x00A7, r18

	if (!(Pipe_IsReadWriteAllowed()))
    119a:	20 91 a6 00 	lds	r18, 0x00A6
    119e:	25 fd       	sbrc	r18, 5
    11a0:	02 c0       	rjmp	.+4      	; 0x11a6 <MIDI_Host_ReceiveEventPacket+0x24>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	08 95       	ret
	  return false;

	Pipe_Read_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK);
    11a6:	64 e0       	ldi	r22, 0x04	; 4
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	40 e0       	ldi	r20, 0x00	; 0
    11ac:	50 e0       	ldi	r21, 0x00	; 0
    11ae:	52 de       	rcall	.-860    	; 0xe54 <Pipe_Read_Stream_LE>
	Pipe_ClearIN();
    11b0:	80 91 a6 00 	lds	r24, 0x00A6
    11b4:	98 2f       	mov	r25, r24
    11b6:	9e 7f       	andi	r25, 0xFE	; 254
    11b8:	90 93 a6 00 	sts	0x00A6, r25
    11bc:	8f 77       	andi	r24, 0x7F	; 127
    11be:	80 93 a6 00 	sts	0x00A6, r24
    11c2:	81 e0       	ldi	r24, 0x01	; 1
	
	return true;
    11c4:	08 95       	ret
    11c6:	81 e0       	ldi	r24, 0x01	; 1
}
    11c8:	08 95       	ret

000011ca <MIDI_Host_SendEventPacket>:
{

}

uint8_t MIDI_Host_SendEventPacket(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo, MIDI_EventPacket_t* const Event)
{
    11ca:	fc 01       	movw	r30, r24
    11cc:	cb 01       	movw	r24, r22
	if ((USB_HostState != HOST_STATE_Configured) || !(MIDIInterfaceInfo->State.IsActive))
    11ce:	20 91 df 01 	lds	r18, 0x01DF
    11d2:	2c 30       	cpi	r18, 0x0C	; 12
    11d4:	c9 f4       	brne	.+50     	; 0x1208 <MIDI_Host_SendEventPacket+0x3e>
    11d6:	24 81       	ldd	r18, Z+4	; 0x04
    11d8:	22 23       	and	r18, r18
    11da:	b1 f0       	breq	.+44     	; 0x1208 <MIDI_Host_SendEventPacket+0x3e>
	  return HOST_SENDCONTROL_DeviceDisconnect;
	
	Pipe_SelectPipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber);
    11dc:	22 81       	ldd	r18, Z+2	; 0x02
    11de:	20 93 a7 00 	sts	0x00A7, r18

	if (Pipe_IsReadWriteAllowed());
    11e2:	20 91 a6 00 	lds	r18, 0x00A6
	{
		uint8_t ErrorCode;

		if ((ErrorCode = Pipe_Write_Stream_LE(Event, sizeof(MIDI_EventPacket_t), NO_STREAM_CALLBACK)) != PIPE_RWSTREAM_NoError)
    11e6:	64 e0       	ldi	r22, 0x04	; 4
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	40 e0       	ldi	r20, 0x00	; 0
    11ec:	50 e0       	ldi	r21, 0x00	; 0
    11ee:	e1 dd       	rcall	.-1086   	; 0xdb2 <Pipe_Write_Stream_LE>
    11f0:	88 23       	and	r24, r24
    11f2:	59 f4       	brne	.+22     	; 0x120a <MIDI_Host_SendEventPacket+0x40>
		  return ErrorCode;

		Pipe_ClearOUT();
    11f4:	90 91 a6 00 	lds	r25, 0x00A6
    11f8:	29 2f       	mov	r18, r25
    11fa:	2b 7f       	andi	r18, 0xFB	; 251
    11fc:	20 93 a6 00 	sts	0x00A6, r18
    1200:	9f 77       	andi	r25, 0x7F	; 127
    1202:	90 93 a6 00 	sts	0x00A6, r25
	}
	
	return PIPE_RWSTREAM_NoError;
    1206:	08 95       	ret
    1208:	81 e0       	ldi	r24, 0x01	; 1
}
    120a:	08 95       	ret

0000120c <MIDI_Host_ConfigurePipes>:
#define  INCLUDE_FROM_MIDI_CLASS_HOST_C
#include "MIDI.h"

uint8_t MIDI_Host_ConfigurePipes(USB_ClassInfo_MIDI_Host_t* const MIDIInterfaceInfo, uint16_t ConfigDescriptorSize,
                                 void* ConfigDescriptorData)
{
    120c:	7f 92       	push	r7
    120e:	8f 92       	push	r8
    1210:	9f 92       	push	r9
    1212:	af 92       	push	r10
    1214:	bf 92       	push	r11
    1216:	cf 92       	push	r12
    1218:	df 92       	push	r13
    121a:	ef 92       	push	r14
    121c:	ff 92       	push	r15
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <MIDI_Host_ConfigurePipes+0x1c>
    1228:	00 d0       	rcall	.+0      	; 0x122a <MIDI_Host_ConfigurePipes+0x1e>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	6c 01       	movw	r12, r24
    1232:	7a 83       	std	Y+2, r23	; 0x02
    1234:	69 83       	std	Y+1, r22	; 0x01
    1236:	5c 83       	std	Y+4, r21	; 0x04
    1238:	4b 83       	std	Y+3, r20	; 0x03
	uint8_t FoundEndpoints = 0;

	memset(&MIDIInterfaceInfo->State, 0x00, sizeof(MIDIInterfaceInfo->State));
    123a:	04 96       	adiw	r24, 0x04	; 4
    123c:	fc 01       	movw	r30, r24
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	df 01       	movw	r26, r30
    1242:	1d 92       	st	X+, r1
    1244:	8a 95       	dec	r24
    1246:	e9 f7       	brne	.-6      	; 0x1242 <MIDI_Host_ConfigurePipes+0x36>

	if (DESCRIPTOR_TYPE(ConfigDescriptorData) != DTYPE_Configuration)
    1248:	eb 81       	ldd	r30, Y+3	; 0x03
    124a:	fc 81       	ldd	r31, Y+4	; 0x04
    124c:	81 81       	ldd	r24, Z+1	; 0x01
    124e:	82 30       	cpi	r24, 0x02	; 2
    1250:	11 f0       	breq	.+4      	; 0x1256 <MIDI_Host_ConfigurePipes+0x4a>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	5e c0       	rjmp	.+188    	; 0x1312 <MIDI_Host_ConfigurePipes+0x106>
	  return MIDI_ENUMERROR_InvalidConfigDescriptor;
	
	if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1256:	8e 01       	movw	r16, r28
    1258:	0d 5f       	subi	r16, 0xFD	; 253
    125a:	1f 4f       	sbci	r17, 0xFF	; 255
    125c:	5e 01       	movw	r10, r28
    125e:	08 94       	sec
    1260:	a1 1c       	adc	r10, r1
    1262:	b1 1c       	adc	r11, r1
    1264:	c5 01       	movw	r24, r10
    1266:	b8 01       	movw	r22, r16
    1268:	42 eb       	ldi	r20, 0xB2	; 178
    126a:	58 e0       	ldi	r21, 0x08	; 8
    126c:	e8 de       	rcall	.-560    	; 0x103e <USB_GetNextDescriptorComp>
    126e:	88 23       	and	r24, r24
    1270:	11 f0       	breq	.+4      	; 0x1276 <MIDI_Host_ConfigurePipes+0x6a>
    1272:	82 e0       	ldi	r24, 0x02	; 2
    1274:	4e c0       	rjmp	.+156    	; 0x1312 <MIDI_Host_ConfigurePipes+0x106>
    1276:	30 e0       	ldi	r19, 0x00	; 0
		return MIDI_ENUMERROR_NoStreamingInterfaceFound;
	}
	
	while (FoundEndpoints != (MIDI_FOUND_DATAPIPE_IN | MIDI_FOUND_DATAPIPE_OUT))
	{
		if (USB_GetNextDescriptorComp(&ConfigDescriptorSize, &ConfigDescriptorData,
    1278:	f0 2e       	mov	r15, r16
    127a:	91 2e       	mov	r9, r17
    127c:	8a 2c       	mov	r8, r10
    127e:	7b 2c       	mov	r7, r11
    1280:	88 2d       	mov	r24, r8
    1282:	97 2d       	mov	r25, r7
    1284:	6f 2d       	mov	r22, r15
    1286:	79 2d       	mov	r23, r9
    1288:	4c e9       	ldi	r20, 0x9C	; 156
    128a:	59 e0       	ldi	r21, 0x09	; 9
    128c:	3d 83       	std	Y+5, r19	; 0x05
    128e:	d7 de       	rcall	.-594    	; 0x103e <USB_GetNextDescriptorComp>
    1290:	3d 81       	ldd	r19, Y+5	; 0x05
    1292:	88 23       	and	r24, r24
    1294:	11 f0       	breq	.+4      	; 0x129a <MIDI_Host_ConfigurePipes+0x8e>
    1296:	83 e0       	ldi	r24, 0x03	; 3
    1298:	3c c0       	rjmp	.+120    	; 0x1312 <MIDI_Host_ConfigurePipes+0x106>
		                              DComp_MIDI_Host_NextMIDIStreamingDataEndpoint) != DESCRIPTOR_SEARCH_COMP_Found)
		{
			return MIDI_ENUMERROR_EndpointsNotFound;
		}
		
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);
    129a:	ab 80       	ldd	r10, Y+3	; 0x03
    129c:	bc 80       	ldd	r11, Y+4	; 0x04

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
    129e:	f5 01       	movw	r30, r10
    12a0:	22 81       	ldd	r18, Z+2	; 0x02
    12a2:	04 81       	ldd	r16, Z+4	; 0x04
    12a4:	15 81       	ldd	r17, Z+5	; 0x05
    12a6:	27 ff       	sbrs	r18, 7
    12a8:	17 c0       	rjmp	.+46     	; 0x12d8 <MIDI_Host_ConfigurePipes+0xcc>
		{
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataINPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_IN,
    12aa:	d6 01       	movw	r26, r12
    12ac:	8c 91       	ld	r24, X
							   EndpointData->EndpointAddress, EndpointData->EndpointSize,
							   MIDIInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
    12ae:	11 96       	adiw	r26, 0x01	; 1
    12b0:	9c 91       	ld	r25, X
    12b2:	11 97       	sbiw	r26, 0x01	; 1
    12b4:	91 11       	cpse	r25, r1
    12b6:	94 e0       	ldi	r25, 0x04	; 4
		
		USB_Descriptor_Endpoint_t* EndpointData = DESCRIPTOR_PCAST(ConfigDescriptorData, USB_Descriptor_Endpoint_t);

		if (EndpointData->EndpointAddress & ENDPOINT_DESCRIPTOR_DIR_IN)
		{
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataINPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_IN,
    12b8:	62 e0       	ldi	r22, 0x02	; 2
    12ba:	40 e1       	ldi	r20, 0x10	; 16
    12bc:	e9 2e       	mov	r14, r25
    12be:	3d 83       	std	Y+5, r19	; 0x05
    12c0:	c0 dc       	rcall	.-1664   	; 0xc42 <Pipe_ConfigurePipe>
							   EndpointData->EndpointAddress, EndpointData->EndpointSize,
							   MIDIInterfaceInfo->Config.DataINPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			MIDIInterfaceInfo->State.DataINPipeSize = EndpointData->EndpointSize;
    12c2:	f5 01       	movw	r30, r10
    12c4:	84 81       	ldd	r24, Z+4	; 0x04
    12c6:	95 81       	ldd	r25, Z+5	; 0x05
    12c8:	d6 01       	movw	r26, r12
    12ca:	16 96       	adiw	r26, 0x06	; 6
    12cc:	9c 93       	st	X, r25
    12ce:	8e 93       	st	-X, r24
    12d0:	15 97       	sbiw	r26, 0x05	; 5
			
			FoundEndpoints |= MIDI_FOUND_DATAPIPE_IN;
    12d2:	3d 81       	ldd	r19, Y+5	; 0x05
    12d4:	31 60       	ori	r19, 0x01	; 1
    12d6:	14 c0       	rjmp	.+40     	; 0x1300 <MIDI_Host_ConfigurePipes+0xf4>
		}
		else
		{
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    12d8:	f6 01       	movw	r30, r12
    12da:	82 81       	ldd	r24, Z+2	; 0x02
							   EndpointData->EndpointAddress, EndpointData->EndpointSize,
							   MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
    12dc:	93 81       	ldd	r25, Z+3	; 0x03
    12de:	91 11       	cpse	r25, r1
    12e0:	94 e0       	ldi	r25, 0x04	; 4
			
			FoundEndpoints |= MIDI_FOUND_DATAPIPE_IN;
		}
		else
		{
			Pipe_ConfigurePipe(MIDIInterfaceInfo->Config.DataOUTPipeNumber, EP_TYPE_BULK, PIPE_TOKEN_OUT,
    12e2:	62 e0       	ldi	r22, 0x02	; 2
    12e4:	40 e2       	ldi	r20, 0x20	; 32
    12e6:	e9 2e       	mov	r14, r25
    12e8:	3d 83       	std	Y+5, r19	; 0x05
    12ea:	ab dc       	rcall	.-1706   	; 0xc42 <Pipe_ConfigurePipe>
							   EndpointData->EndpointAddress, EndpointData->EndpointSize,
							   MIDIInterfaceInfo->Config.DataOUTPipeDoubleBank ? PIPE_BANK_DOUBLE : PIPE_BANK_SINGLE);
			MIDIInterfaceInfo->State.DataOUTPipeSize = EndpointData->EndpointSize;
    12ec:	d5 01       	movw	r26, r10
    12ee:	14 96       	adiw	r26, 0x04	; 4
    12f0:	8d 91       	ld	r24, X+
    12f2:	9c 91       	ld	r25, X
    12f4:	15 97       	sbiw	r26, 0x05	; 5
    12f6:	f6 01       	movw	r30, r12
    12f8:	90 87       	std	Z+8, r25	; 0x08
    12fa:	87 83       	std	Z+7, r24	; 0x07

			FoundEndpoints |= MIDI_FOUND_DATAPIPE_OUT;
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	32 60       	ori	r19, 0x02	; 2
	                              DComp_MIDI_Host_NextMIDIStreamingInterface) != DESCRIPTOR_SEARCH_COMP_Found)
	{
		return MIDI_ENUMERROR_NoStreamingInterfaceFound;
	}
	
	while (FoundEndpoints != (MIDI_FOUND_DATAPIPE_IN | MIDI_FOUND_DATAPIPE_OUT))
    1300:	33 30       	cpi	r19, 0x03	; 3
    1302:	09 f0       	breq	.+2      	; 0x1306 <MIDI_Host_ConfigurePipes+0xfa>
    1304:	bd cf       	rjmp	.-134    	; 0x1280 <MIDI_Host_ConfigurePipes+0x74>

			FoundEndpoints |= MIDI_FOUND_DATAPIPE_OUT;
		}
	}
	
	MIDIInterfaceInfo->State.IsActive = true;
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	d6 01       	movw	r26, r12
    130a:	14 96       	adiw	r26, 0x04	; 4
    130c:	8c 93       	st	X, r24
    130e:	14 97       	sbiw	r26, 0x04	; 4
    1310:	80 e0       	ldi	r24, 0x00	; 0
	return MIDI_ENUMERROR_NoError;
}
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	1f 91       	pop	r17
    1322:	0f 91       	pop	r16
    1324:	ff 90       	pop	r15
    1326:	ef 90       	pop	r14
    1328:	df 90       	pop	r13
    132a:	cf 90       	pop	r12
    132c:	bf 90       	pop	r11
    132e:	af 90       	pop	r10
    1330:	9f 90       	pop	r9
    1332:	8f 90       	pop	r8
    1334:	7f 90       	pop	r7
    1336:	08 95       	ret

00001338 <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint>:
	
	return DESCRIPTOR_SEARCH_NotFound;
}

static uint8_t DComp_MIDI_Host_NextMIDIStreamingDataEndpoint(void* const CurrentDescriptor)
{
    1338:	fc 01       	movw	r30, r24
	if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Endpoint)
    133a:	81 81       	ldd	r24, Z+1	; 0x01
    133c:	85 30       	cpi	r24, 0x05	; 5
    133e:	49 f4       	brne	.+18     	; 0x1352 <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint+0x1a>
	{
		USB_Descriptor_Endpoint_t* CurrentEndpoint = DESCRIPTOR_PCAST(CurrentDescriptor,
		                                                              USB_Descriptor_Endpoint_t);
	
		uint8_t EndpointType = (CurrentEndpoint->Attributes & EP_TYPE_MASK);
    1340:	83 81       	ldd	r24, Z+3	; 0x03
    1342:	83 70       	andi	r24, 0x03	; 3
    1344:	82 30       	cpi	r24, 0x02	; 2
    1346:	49 f4       	brne	.+18     	; 0x135a <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
	
		if ((EndpointType == EP_TYPE_BULK) && !(Pipe_IsEndpointBound(CurrentEndpoint->EndpointAddress)))
    1348:	82 81       	ldd	r24, Z+2	; 0x02
    134a:	ea dc       	rcall	.-1580   	; 0xd20 <Pipe_IsEndpointBound>
    134c:	88 23       	and	r24, r24
    134e:	29 f4       	brne	.+10     	; 0x135a <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1350:	08 95       	ret
		  return DESCRIPTOR_SEARCH_Found;
	}
	else if (DESCRIPTOR_TYPE(CurrentDescriptor) == DTYPE_Interface)
    1352:	84 30       	cpi	r24, 0x04	; 4
    1354:	11 f4       	brne	.+4      	; 0x135a <DComp_MIDI_Host_NextMIDIStreamingDataEndpoint+0x22>
    1356:	81 e0       	ldi	r24, 0x01	; 1
    1358:	08 95       	ret
    135a:	82 e0       	ldi	r24, 0x02	; 2
	{
		return DESCRIPTOR_SEARCH_Fail;
	}

	return DESCRIPTOR_SEARCH_NotFound;
}
    135c:	08 95       	ret

0000135e <printf_P>:
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	fe 01       	movw	r30, r28
    1368:	35 96       	adiw	r30, 0x05	; 5
    136a:	61 91       	ld	r22, Z+
    136c:	71 91       	ld	r23, Z+
    136e:	80 91 e2 01 	lds	r24, 0x01E2
    1372:	90 91 e3 01 	lds	r25, 0x01E3
    1376:	dc 01       	movw	r26, r24
    1378:	13 96       	adiw	r26, 0x03	; 3
    137a:	2c 91       	ld	r18, X
    137c:	13 97       	sbiw	r26, 0x03	; 3
    137e:	28 60       	ori	r18, 0x08	; 8
    1380:	13 96       	adiw	r26, 0x03	; 3
    1382:	2c 93       	st	X, r18
    1384:	af 01       	movw	r20, r30
    1386:	81 d0       	rcall	.+258    	; 0x148a <vfprintf>
    1388:	e0 91 e2 01 	lds	r30, 0x01E2
    138c:	f0 91 e3 01 	lds	r31, 0x01E3
    1390:	23 81       	ldd	r18, Z+3	; 0x03
    1392:	27 7f       	andi	r18, 0xF7	; 247
    1394:	23 83       	std	Z+3, r18	; 0x03
    1396:	cf 91       	pop	r28
    1398:	df 91       	pop	r29
    139a:	08 95       	ret

0000139c <puts>:
    139c:	ef 92       	push	r14
    139e:	ff 92       	push	r15
    13a0:	0f 93       	push	r16
    13a2:	1f 93       	push	r17
    13a4:	cf 93       	push	r28
    13a6:	df 93       	push	r29
    13a8:	8c 01       	movw	r16, r24
    13aa:	e0 91 e2 01 	lds	r30, 0x01E2
    13ae:	f0 91 e3 01 	lds	r31, 0x01E3
    13b2:	83 81       	ldd	r24, Z+3	; 0x03
    13b4:	81 ff       	sbrs	r24, 1
    13b6:	23 c0       	rjmp	.+70     	; 0x13fe <puts+0x62>
    13b8:	c0 e0       	ldi	r28, 0x00	; 0
    13ba:	d0 e0       	ldi	r29, 0x00	; 0
    13bc:	0e c0       	rjmp	.+28     	; 0x13da <puts+0x3e>
    13be:	60 91 e2 01 	lds	r22, 0x01E2
    13c2:	70 91 e3 01 	lds	r23, 0x01E3
    13c6:	db 01       	movw	r26, r22
    13c8:	18 96       	adiw	r26, 0x08	; 8
    13ca:	ed 91       	ld	r30, X+
    13cc:	fc 91       	ld	r31, X
    13ce:	19 97       	sbiw	r26, 0x09	; 9
    13d0:	09 95       	icall
    13d2:	00 97       	sbiw	r24, 0x00	; 0
    13d4:	11 f0       	breq	.+4      	; 0x13da <puts+0x3e>
    13d6:	cf ef       	ldi	r28, 0xFF	; 255
    13d8:	df ef       	ldi	r29, 0xFF	; 255
    13da:	f8 01       	movw	r30, r16
    13dc:	81 91       	ld	r24, Z+
    13de:	8f 01       	movw	r16, r30
    13e0:	88 23       	and	r24, r24
    13e2:	69 f7       	brne	.-38     	; 0x13be <puts+0x22>
    13e4:	60 91 e2 01 	lds	r22, 0x01E2
    13e8:	70 91 e3 01 	lds	r23, 0x01E3
    13ec:	db 01       	movw	r26, r22
    13ee:	18 96       	adiw	r26, 0x08	; 8
    13f0:	ed 91       	ld	r30, X+
    13f2:	fc 91       	ld	r31, X
    13f4:	19 97       	sbiw	r26, 0x09	; 9
    13f6:	8a e0       	ldi	r24, 0x0A	; 10
    13f8:	09 95       	icall
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	11 f0       	breq	.+4      	; 0x1402 <puts+0x66>
    13fe:	cf ef       	ldi	r28, 0xFF	; 255
    1400:	df ef       	ldi	r29, 0xFF	; 255
    1402:	ce 01       	movw	r24, r28
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	1f 91       	pop	r17
    140a:	0f 91       	pop	r16
    140c:	ff 90       	pop	r15
    140e:	ef 90       	pop	r14
    1410:	08 95       	ret

00001412 <puts_P>:
    1412:	ef 92       	push	r14
    1414:	ff 92       	push	r15
    1416:	0f 93       	push	r16
    1418:	1f 93       	push	r17
    141a:	cf 93       	push	r28
    141c:	df 93       	push	r29
    141e:	8c 01       	movw	r16, r24
    1420:	e0 91 e2 01 	lds	r30, 0x01E2
    1424:	f0 91 e3 01 	lds	r31, 0x01E3
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	81 ff       	sbrs	r24, 1
    142c:	24 c0       	rjmp	.+72     	; 0x1476 <puts_P+0x64>
    142e:	c0 e0       	ldi	r28, 0x00	; 0
    1430:	d0 e0       	ldi	r29, 0x00	; 0
    1432:	10 c0       	rjmp	.+32     	; 0x1454 <puts_P+0x42>
    1434:	60 91 e2 01 	lds	r22, 0x01E2
    1438:	70 91 e3 01 	lds	r23, 0x01E3
    143c:	db 01       	movw	r26, r22
    143e:	18 96       	adiw	r26, 0x08	; 8
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	19 97       	sbiw	r26, 0x09	; 9
    1446:	09 95       	icall
    1448:	00 97       	sbiw	r24, 0x00	; 0
    144a:	11 f0       	breq	.+4      	; 0x1450 <puts_P+0x3e>
    144c:	cf ef       	ldi	r28, 0xFF	; 255
    144e:	df ef       	ldi	r29, 0xFF	; 255
    1450:	0f 5f       	subi	r16, 0xFF	; 255
    1452:	1f 4f       	sbci	r17, 0xFF	; 255
    1454:	f8 01       	movw	r30, r16
    1456:	84 91       	lpm	r24, Z
    1458:	88 23       	and	r24, r24
    145a:	61 f7       	brne	.-40     	; 0x1434 <puts_P+0x22>
    145c:	60 91 e2 01 	lds	r22, 0x01E2
    1460:	70 91 e3 01 	lds	r23, 0x01E3
    1464:	db 01       	movw	r26, r22
    1466:	18 96       	adiw	r26, 0x08	; 8
    1468:	ed 91       	ld	r30, X+
    146a:	fc 91       	ld	r31, X
    146c:	19 97       	sbiw	r26, 0x09	; 9
    146e:	8a e0       	ldi	r24, 0x0A	; 10
    1470:	09 95       	icall
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	11 f0       	breq	.+4      	; 0x147a <puts_P+0x68>
    1476:	cf ef       	ldi	r28, 0xFF	; 255
    1478:	df ef       	ldi	r29, 0xFF	; 255
    147a:	ce 01       	movw	r24, r28
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0f 91       	pop	r16
    1484:	ff 90       	pop	r15
    1486:	ef 90       	pop	r14
    1488:	08 95       	ret

0000148a <vfprintf>:
    148a:	3f 92       	push	r3
    148c:	4f 92       	push	r4
    148e:	5f 92       	push	r5
    1490:	6f 92       	push	r6
    1492:	7f 92       	push	r7
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	0f 93       	push	r16
    14a6:	1f 93       	push	r17
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	2c 97       	sbiw	r28, 0x0c	; 12
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	6c 01       	movw	r12, r24
    14be:	2b 01       	movw	r4, r22
    14c0:	8a 01       	movw	r16, r20
    14c2:	fc 01       	movw	r30, r24
    14c4:	17 82       	std	Z+7, r1	; 0x07
    14c6:	16 82       	std	Z+6, r1	; 0x06
    14c8:	83 81       	ldd	r24, Z+3	; 0x03
    14ca:	81 fd       	sbrc	r24, 1
    14cc:	03 c0       	rjmp	.+6      	; 0x14d4 <vfprintf+0x4a>
    14ce:	2f ef       	ldi	r18, 0xFF	; 255
    14d0:	3f ef       	ldi	r19, 0xFF	; 255
    14d2:	b4 c1       	rjmp	.+872    	; 0x183c <vfprintf+0x3b2>
    14d4:	4e 01       	movw	r8, r28
    14d6:	08 94       	sec
    14d8:	81 1c       	adc	r8, r1
    14da:	91 1c       	adc	r9, r1
    14dc:	6f e3       	ldi	r22, 0x3F	; 63
    14de:	36 2e       	mov	r3, r22
    14e0:	f6 01       	movw	r30, r12
    14e2:	93 81       	ldd	r25, Z+3	; 0x03
    14e4:	f2 01       	movw	r30, r4
    14e6:	93 fd       	sbrc	r25, 3
    14e8:	85 91       	lpm	r24, Z+
    14ea:	93 ff       	sbrs	r25, 3
    14ec:	81 91       	ld	r24, Z+
    14ee:	2f 01       	movw	r4, r30
    14f0:	88 23       	and	r24, r24
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <vfprintf+0x6c>
    14f4:	a0 c1       	rjmp	.+832    	; 0x1836 <vfprintf+0x3ac>
    14f6:	85 32       	cpi	r24, 0x25	; 37
    14f8:	39 f4       	brne	.+14     	; 0x1508 <vfprintf+0x7e>
    14fa:	93 fd       	sbrc	r25, 3
    14fc:	85 91       	lpm	r24, Z+
    14fe:	93 ff       	sbrs	r25, 3
    1500:	81 91       	ld	r24, Z+
    1502:	2f 01       	movw	r4, r30
    1504:	85 32       	cpi	r24, 0x25	; 37
    1506:	21 f4       	brne	.+8      	; 0x1510 <vfprintf+0x86>
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	b6 01       	movw	r22, r12
    150c:	c6 d1       	rcall	.+908    	; 0x189a <fputc>
    150e:	e8 cf       	rjmp	.-48     	; 0x14e0 <vfprintf+0x56>
    1510:	ee 24       	eor	r14, r14
    1512:	ff 24       	eor	r15, r15
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	20 32       	cpi	r18, 0x20	; 32
    1518:	b0 f4       	brcc	.+44     	; 0x1546 <vfprintf+0xbc>
    151a:	8b 32       	cpi	r24, 0x2B	; 43
    151c:	69 f0       	breq	.+26     	; 0x1538 <vfprintf+0xae>
    151e:	8c 32       	cpi	r24, 0x2C	; 44
    1520:	28 f4       	brcc	.+10     	; 0x152c <vfprintf+0xa2>
    1522:	80 32       	cpi	r24, 0x20	; 32
    1524:	51 f0       	breq	.+20     	; 0x153a <vfprintf+0xb0>
    1526:	83 32       	cpi	r24, 0x23	; 35
    1528:	71 f4       	brne	.+28     	; 0x1546 <vfprintf+0xbc>
    152a:	0b c0       	rjmp	.+22     	; 0x1542 <vfprintf+0xb8>
    152c:	8d 32       	cpi	r24, 0x2D	; 45
    152e:	39 f0       	breq	.+14     	; 0x153e <vfprintf+0xb4>
    1530:	80 33       	cpi	r24, 0x30	; 48
    1532:	49 f4       	brne	.+18     	; 0x1546 <vfprintf+0xbc>
    1534:	21 60       	ori	r18, 0x01	; 1
    1536:	2c c0       	rjmp	.+88     	; 0x1590 <vfprintf+0x106>
    1538:	22 60       	ori	r18, 0x02	; 2
    153a:	24 60       	ori	r18, 0x04	; 4
    153c:	29 c0       	rjmp	.+82     	; 0x1590 <vfprintf+0x106>
    153e:	28 60       	ori	r18, 0x08	; 8
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <vfprintf+0x106>
    1542:	20 61       	ori	r18, 0x10	; 16
    1544:	25 c0       	rjmp	.+74     	; 0x1590 <vfprintf+0x106>
    1546:	27 fd       	sbrc	r18, 7
    1548:	2c c0       	rjmp	.+88     	; 0x15a2 <vfprintf+0x118>
    154a:	38 2f       	mov	r19, r24
    154c:	30 53       	subi	r19, 0x30	; 48
    154e:	3a 30       	cpi	r19, 0x0A	; 10
    1550:	98 f4       	brcc	.+38     	; 0x1578 <vfprintf+0xee>
    1552:	26 ff       	sbrs	r18, 6
    1554:	08 c0       	rjmp	.+16     	; 0x1566 <vfprintf+0xdc>
    1556:	8e 2d       	mov	r24, r14
    1558:	88 0f       	add	r24, r24
    155a:	e8 2e       	mov	r14, r24
    155c:	ee 0c       	add	r14, r14
    155e:	ee 0c       	add	r14, r14
    1560:	e8 0e       	add	r14, r24
    1562:	e3 0e       	add	r14, r19
    1564:	15 c0       	rjmp	.+42     	; 0x1590 <vfprintf+0x106>
    1566:	8f 2d       	mov	r24, r15
    1568:	88 0f       	add	r24, r24
    156a:	f8 2e       	mov	r15, r24
    156c:	ff 0c       	add	r15, r15
    156e:	ff 0c       	add	r15, r15
    1570:	f8 0e       	add	r15, r24
    1572:	f3 0e       	add	r15, r19
    1574:	20 62       	ori	r18, 0x20	; 32
    1576:	0c c0       	rjmp	.+24     	; 0x1590 <vfprintf+0x106>
    1578:	8e 32       	cpi	r24, 0x2E	; 46
    157a:	21 f4       	brne	.+8      	; 0x1584 <vfprintf+0xfa>
    157c:	26 fd       	sbrc	r18, 6
    157e:	5b c1       	rjmp	.+694    	; 0x1836 <vfprintf+0x3ac>
    1580:	20 64       	ori	r18, 0x40	; 64
    1582:	06 c0       	rjmp	.+12     	; 0x1590 <vfprintf+0x106>
    1584:	8c 36       	cpi	r24, 0x6C	; 108
    1586:	11 f4       	brne	.+4      	; 0x158c <vfprintf+0x102>
    1588:	20 68       	ori	r18, 0x80	; 128
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <vfprintf+0x106>
    158c:	88 36       	cpi	r24, 0x68	; 104
    158e:	49 f4       	brne	.+18     	; 0x15a2 <vfprintf+0x118>
    1590:	f2 01       	movw	r30, r4
    1592:	93 fd       	sbrc	r25, 3
    1594:	85 91       	lpm	r24, Z+
    1596:	93 ff       	sbrs	r25, 3
    1598:	81 91       	ld	r24, Z+
    159a:	2f 01       	movw	r4, r30
    159c:	88 23       	and	r24, r24
    159e:	09 f0       	breq	.+2      	; 0x15a2 <vfprintf+0x118>
    15a0:	ba cf       	rjmp	.-140    	; 0x1516 <vfprintf+0x8c>
    15a2:	98 2f       	mov	r25, r24
    15a4:	95 54       	subi	r25, 0x45	; 69
    15a6:	93 30       	cpi	r25, 0x03	; 3
    15a8:	18 f0       	brcs	.+6      	; 0x15b0 <vfprintf+0x126>
    15aa:	90 52       	subi	r25, 0x20	; 32
    15ac:	93 30       	cpi	r25, 0x03	; 3
    15ae:	20 f4       	brcc	.+8      	; 0x15b8 <vfprintf+0x12e>
    15b0:	0c 5f       	subi	r16, 0xFC	; 252
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	39 82       	std	Y+1, r3	; 0x01
    15b6:	0d c0       	rjmp	.+26     	; 0x15d2 <vfprintf+0x148>
    15b8:	83 36       	cpi	r24, 0x63	; 99
    15ba:	31 f0       	breq	.+12     	; 0x15c8 <vfprintf+0x13e>
    15bc:	83 37       	cpi	r24, 0x73	; 115
    15be:	71 f0       	breq	.+28     	; 0x15dc <vfprintf+0x152>
    15c0:	83 35       	cpi	r24, 0x53	; 83
    15c2:	09 f0       	breq	.+2      	; 0x15c6 <vfprintf+0x13c>
    15c4:	54 c0       	rjmp	.+168    	; 0x166e <vfprintf+0x1e4>
    15c6:	1d c0       	rjmp	.+58     	; 0x1602 <vfprintf+0x178>
    15c8:	f8 01       	movw	r30, r16
    15ca:	80 81       	ld	r24, Z
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	0e 5f       	subi	r16, 0xFE	; 254
    15d0:	1f 4f       	sbci	r17, 0xFF	; 255
    15d2:	54 01       	movw	r10, r8
    15d4:	51 e0       	ldi	r21, 0x01	; 1
    15d6:	65 2e       	mov	r6, r21
    15d8:	71 2c       	mov	r7, r1
    15da:	11 c0       	rjmp	.+34     	; 0x15fe <vfprintf+0x174>
    15dc:	f8 01       	movw	r30, r16
    15de:	a0 80       	ld	r10, Z
    15e0:	b1 80       	ldd	r11, Z+1	; 0x01
    15e2:	26 fd       	sbrc	r18, 6
    15e4:	03 c0       	rjmp	.+6      	; 0x15ec <vfprintf+0x162>
    15e6:	6f ef       	ldi	r22, 0xFF	; 255
    15e8:	7f ef       	ldi	r23, 0xFF	; 255
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <vfprintf+0x166>
    15ec:	6e 2d       	mov	r22, r14
    15ee:	70 e0       	ldi	r23, 0x00	; 0
    15f0:	0e 5f       	subi	r16, 0xFE	; 254
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	c5 01       	movw	r24, r10
    15f6:	2c 87       	std	Y+12, r18	; 0x0c
    15f8:	45 d1       	rcall	.+650    	; 0x1884 <strnlen>
    15fa:	3c 01       	movw	r6, r24
    15fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    15fe:	2f 77       	andi	r18, 0x7F	; 127
    1600:	12 c0       	rjmp	.+36     	; 0x1626 <vfprintf+0x19c>
    1602:	f8 01       	movw	r30, r16
    1604:	a0 80       	ld	r10, Z
    1606:	b1 80       	ldd	r11, Z+1	; 0x01
    1608:	26 fd       	sbrc	r18, 6
    160a:	03 c0       	rjmp	.+6      	; 0x1612 <vfprintf+0x188>
    160c:	6f ef       	ldi	r22, 0xFF	; 255
    160e:	7f ef       	ldi	r23, 0xFF	; 255
    1610:	02 c0       	rjmp	.+4      	; 0x1616 <vfprintf+0x18c>
    1612:	6e 2d       	mov	r22, r14
    1614:	70 e0       	ldi	r23, 0x00	; 0
    1616:	0e 5f       	subi	r16, 0xFE	; 254
    1618:	1f 4f       	sbci	r17, 0xFF	; 255
    161a:	c5 01       	movw	r24, r10
    161c:	2c 87       	std	Y+12, r18	; 0x0c
    161e:	27 d1       	rcall	.+590    	; 0x186e <strnlen_P>
    1620:	3c 01       	movw	r6, r24
    1622:	2c 85       	ldd	r18, Y+12	; 0x0c
    1624:	20 68       	ori	r18, 0x80	; 128
    1626:	23 ff       	sbrs	r18, 3
    1628:	08 c0       	rjmp	.+16     	; 0x163a <vfprintf+0x1b0>
    162a:	1d c0       	rjmp	.+58     	; 0x1666 <vfprintf+0x1dc>
    162c:	80 e2       	ldi	r24, 0x20	; 32
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	b6 01       	movw	r22, r12
    1632:	2c 87       	std	Y+12, r18	; 0x0c
    1634:	32 d1       	rcall	.+612    	; 0x189a <fputc>
    1636:	fa 94       	dec	r15
    1638:	2c 85       	ldd	r18, Y+12	; 0x0c
    163a:	8f 2d       	mov	r24, r15
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	68 16       	cp	r6, r24
    1640:	79 06       	cpc	r7, r25
    1642:	a0 f3       	brcs	.-24     	; 0x162c <vfprintf+0x1a2>
    1644:	10 c0       	rjmp	.+32     	; 0x1666 <vfprintf+0x1dc>
    1646:	f5 01       	movw	r30, r10
    1648:	27 fd       	sbrc	r18, 7
    164a:	85 91       	lpm	r24, Z+
    164c:	27 ff       	sbrs	r18, 7
    164e:	81 91       	ld	r24, Z+
    1650:	5f 01       	movw	r10, r30
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	b6 01       	movw	r22, r12
    1656:	2c 87       	std	Y+12, r18	; 0x0c
    1658:	20 d1       	rcall	.+576    	; 0x189a <fputc>
    165a:	2c 85       	ldd	r18, Y+12	; 0x0c
    165c:	f1 10       	cpse	r15, r1
    165e:	fa 94       	dec	r15
    1660:	08 94       	sec
    1662:	61 08       	sbc	r6, r1
    1664:	71 08       	sbc	r7, r1
    1666:	61 14       	cp	r6, r1
    1668:	71 04       	cpc	r7, r1
    166a:	69 f7       	brne	.-38     	; 0x1646 <vfprintf+0x1bc>
    166c:	e1 c0       	rjmp	.+450    	; 0x1830 <vfprintf+0x3a6>
    166e:	84 36       	cpi	r24, 0x64	; 100
    1670:	11 f0       	breq	.+4      	; 0x1676 <vfprintf+0x1ec>
    1672:	89 36       	cpi	r24, 0x69	; 105
    1674:	41 f5       	brne	.+80     	; 0x16c6 <vfprintf+0x23c>
    1676:	27 ff       	sbrs	r18, 7
    1678:	08 c0       	rjmp	.+16     	; 0x168a <vfprintf+0x200>
    167a:	f8 01       	movw	r30, r16
    167c:	60 81       	ld	r22, Z
    167e:	71 81       	ldd	r23, Z+1	; 0x01
    1680:	82 81       	ldd	r24, Z+2	; 0x02
    1682:	93 81       	ldd	r25, Z+3	; 0x03
    1684:	0c 5f       	subi	r16, 0xFC	; 252
    1686:	1f 4f       	sbci	r17, 0xFF	; 255
    1688:	09 c0       	rjmp	.+18     	; 0x169c <vfprintf+0x212>
    168a:	f8 01       	movw	r30, r16
    168c:	60 81       	ld	r22, Z
    168e:	71 81       	ldd	r23, Z+1	; 0x01
    1690:	88 27       	eor	r24, r24
    1692:	77 fd       	sbrc	r23, 7
    1694:	80 95       	com	r24
    1696:	98 2f       	mov	r25, r24
    1698:	0e 5f       	subi	r16, 0xFE	; 254
    169a:	1f 4f       	sbci	r17, 0xFF	; 255
    169c:	4f e6       	ldi	r20, 0x6F	; 111
    169e:	b4 2e       	mov	r11, r20
    16a0:	b2 22       	and	r11, r18
    16a2:	97 ff       	sbrs	r25, 7
    16a4:	09 c0       	rjmp	.+18     	; 0x16b8 <vfprintf+0x22e>
    16a6:	90 95       	com	r25
    16a8:	80 95       	com	r24
    16aa:	70 95       	com	r23
    16ac:	61 95       	neg	r22
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	8f 4f       	sbci	r24, 0xFF	; 255
    16b2:	9f 4f       	sbci	r25, 0xFF	; 255
    16b4:	f0 e8       	ldi	r31, 0x80	; 128
    16b6:	bf 2a       	or	r11, r31
    16b8:	a4 01       	movw	r20, r8
    16ba:	2a e0       	ldi	r18, 0x0A	; 10
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	19 d1       	rcall	.+562    	; 0x18f2 <__ultoa_invert>
    16c0:	78 2e       	mov	r7, r24
    16c2:	78 18       	sub	r7, r8
    16c4:	42 c0       	rjmp	.+132    	; 0x174a <vfprintf+0x2c0>
    16c6:	85 37       	cpi	r24, 0x75	; 117
    16c8:	31 f4       	brne	.+12     	; 0x16d6 <vfprintf+0x24c>
    16ca:	3f ee       	ldi	r19, 0xEF	; 239
    16cc:	b3 2e       	mov	r11, r19
    16ce:	b2 22       	and	r11, r18
    16d0:	2a e0       	ldi	r18, 0x0A	; 10
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	23 c0       	rjmp	.+70     	; 0x171c <vfprintf+0x292>
    16d6:	99 ef       	ldi	r25, 0xF9	; 249
    16d8:	b9 2e       	mov	r11, r25
    16da:	b2 22       	and	r11, r18
    16dc:	8f 36       	cpi	r24, 0x6F	; 111
    16de:	61 f0       	breq	.+24     	; 0x16f8 <vfprintf+0x26e>
    16e0:	80 37       	cpi	r24, 0x70	; 112
    16e2:	20 f4       	brcc	.+8      	; 0x16ec <vfprintf+0x262>
    16e4:	88 35       	cpi	r24, 0x58	; 88
    16e6:	09 f0       	breq	.+2      	; 0x16ea <vfprintf+0x260>
    16e8:	a6 c0       	rjmp	.+332    	; 0x1836 <vfprintf+0x3ac>
    16ea:	12 c0       	rjmp	.+36     	; 0x1710 <vfprintf+0x286>
    16ec:	80 37       	cpi	r24, 0x70	; 112
    16ee:	39 f0       	breq	.+14     	; 0x16fe <vfprintf+0x274>
    16f0:	88 37       	cpi	r24, 0x78	; 120
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <vfprintf+0x26c>
    16f4:	a0 c0       	rjmp	.+320    	; 0x1836 <vfprintf+0x3ac>
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <vfprintf+0x278>
    16f8:	28 e0       	ldi	r18, 0x08	; 8
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	0f c0       	rjmp	.+30     	; 0x171c <vfprintf+0x292>
    16fe:	20 e1       	ldi	r18, 0x10	; 16
    1700:	b2 2a       	or	r11, r18
    1702:	b4 fe       	sbrs	r11, 4
    1704:	02 c0       	rjmp	.+4      	; 0x170a <vfprintf+0x280>
    1706:	84 e0       	ldi	r24, 0x04	; 4
    1708:	b8 2a       	or	r11, r24
    170a:	20 e1       	ldi	r18, 0x10	; 16
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	06 c0       	rjmp	.+12     	; 0x171c <vfprintf+0x292>
    1710:	b4 fe       	sbrs	r11, 4
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <vfprintf+0x28e>
    1714:	e6 e0       	ldi	r30, 0x06	; 6
    1716:	be 2a       	or	r11, r30
    1718:	20 e1       	ldi	r18, 0x10	; 16
    171a:	32 e0       	ldi	r19, 0x02	; 2
    171c:	b7 fe       	sbrs	r11, 7
    171e:	08 c0       	rjmp	.+16     	; 0x1730 <vfprintf+0x2a6>
    1720:	f8 01       	movw	r30, r16
    1722:	60 81       	ld	r22, Z
    1724:	71 81       	ldd	r23, Z+1	; 0x01
    1726:	82 81       	ldd	r24, Z+2	; 0x02
    1728:	93 81       	ldd	r25, Z+3	; 0x03
    172a:	0c 5f       	subi	r16, 0xFC	; 252
    172c:	1f 4f       	sbci	r17, 0xFF	; 255
    172e:	07 c0       	rjmp	.+14     	; 0x173e <vfprintf+0x2b4>
    1730:	f8 01       	movw	r30, r16
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	0e 5f       	subi	r16, 0xFE	; 254
    173c:	1f 4f       	sbci	r17, 0xFF	; 255
    173e:	a4 01       	movw	r20, r8
    1740:	d8 d0       	rcall	.+432    	; 0x18f2 <__ultoa_invert>
    1742:	78 2e       	mov	r7, r24
    1744:	78 18       	sub	r7, r8
    1746:	ff e7       	ldi	r31, 0x7F	; 127
    1748:	bf 22       	and	r11, r31
    174a:	b6 fe       	sbrs	r11, 6
    174c:	0b c0       	rjmp	.+22     	; 0x1764 <vfprintf+0x2da>
    174e:	2e ef       	ldi	r18, 0xFE	; 254
    1750:	b2 22       	and	r11, r18
    1752:	7e 14       	cp	r7, r14
    1754:	38 f4       	brcc	.+14     	; 0x1764 <vfprintf+0x2da>
    1756:	b4 fe       	sbrs	r11, 4
    1758:	07 c0       	rjmp	.+14     	; 0x1768 <vfprintf+0x2de>
    175a:	b2 fc       	sbrc	r11, 2
    175c:	05 c0       	rjmp	.+10     	; 0x1768 <vfprintf+0x2de>
    175e:	8f ee       	ldi	r24, 0xEF	; 239
    1760:	b8 22       	and	r11, r24
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <vfprintf+0x2de>
    1764:	a7 2c       	mov	r10, r7
    1766:	01 c0       	rjmp	.+2      	; 0x176a <vfprintf+0x2e0>
    1768:	ae 2c       	mov	r10, r14
    176a:	8b 2d       	mov	r24, r11
    176c:	b4 fe       	sbrs	r11, 4
    176e:	0d c0       	rjmp	.+26     	; 0x178a <vfprintf+0x300>
    1770:	fe 01       	movw	r30, r28
    1772:	e7 0d       	add	r30, r7
    1774:	f1 1d       	adc	r31, r1
    1776:	90 81       	ld	r25, Z
    1778:	90 33       	cpi	r25, 0x30	; 48
    177a:	19 f4       	brne	.+6      	; 0x1782 <vfprintf+0x2f8>
    177c:	e9 ee       	ldi	r30, 0xE9	; 233
    177e:	be 22       	and	r11, r30
    1780:	07 c0       	rjmp	.+14     	; 0x1790 <vfprintf+0x306>
    1782:	a3 94       	inc	r10
    1784:	b2 fe       	sbrs	r11, 2
    1786:	04 c0       	rjmp	.+8      	; 0x1790 <vfprintf+0x306>
    1788:	02 c0       	rjmp	.+4      	; 0x178e <vfprintf+0x304>
    178a:	86 78       	andi	r24, 0x86	; 134
    178c:	09 f0       	breq	.+2      	; 0x1790 <vfprintf+0x306>
    178e:	a3 94       	inc	r10
    1790:	6b 2c       	mov	r6, r11
    1792:	b3 fc       	sbrc	r11, 3
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <vfprintf+0x332>
    1796:	b0 fe       	sbrs	r11, 0
    1798:	0e c0       	rjmp	.+28     	; 0x17b6 <vfprintf+0x32c>
    179a:	af 14       	cp	r10, r15
    179c:	10 f0       	brcs	.+4      	; 0x17a2 <vfprintf+0x318>
    179e:	e7 2c       	mov	r14, r7
    17a0:	0a c0       	rjmp	.+20     	; 0x17b6 <vfprintf+0x32c>
    17a2:	e7 2c       	mov	r14, r7
    17a4:	ef 0c       	add	r14, r15
    17a6:	ea 18       	sub	r14, r10
    17a8:	af 2c       	mov	r10, r15
    17aa:	05 c0       	rjmp	.+10     	; 0x17b6 <vfprintf+0x32c>
    17ac:	80 e2       	ldi	r24, 0x20	; 32
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	b6 01       	movw	r22, r12
    17b2:	73 d0       	rcall	.+230    	; 0x189a <fputc>
    17b4:	a3 94       	inc	r10
    17b6:	af 14       	cp	r10, r15
    17b8:	c8 f3       	brcs	.-14     	; 0x17ac <vfprintf+0x322>
    17ba:	04 c0       	rjmp	.+8      	; 0x17c4 <vfprintf+0x33a>
    17bc:	af 14       	cp	r10, r15
    17be:	10 f4       	brcc	.+4      	; 0x17c4 <vfprintf+0x33a>
    17c0:	fa 18       	sub	r15, r10
    17c2:	01 c0       	rjmp	.+2      	; 0x17c6 <vfprintf+0x33c>
    17c4:	ff 24       	eor	r15, r15
    17c6:	64 fe       	sbrs	r6, 4
    17c8:	0e c0       	rjmp	.+28     	; 0x17e6 <vfprintf+0x35c>
    17ca:	80 e3       	ldi	r24, 0x30	; 48
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	b6 01       	movw	r22, r12
    17d0:	64 d0       	rcall	.+200    	; 0x189a <fputc>
    17d2:	62 fe       	sbrs	r6, 2
    17d4:	1b c0       	rjmp	.+54     	; 0x180c <vfprintf+0x382>
    17d6:	61 fc       	sbrc	r6, 1
    17d8:	03 c0       	rjmp	.+6      	; 0x17e0 <vfprintf+0x356>
    17da:	88 e7       	ldi	r24, 0x78	; 120
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	0e c0       	rjmp	.+28     	; 0x17fc <vfprintf+0x372>
    17e0:	88 e5       	ldi	r24, 0x58	; 88
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	0b c0       	rjmp	.+22     	; 0x17fc <vfprintf+0x372>
    17e6:	86 2d       	mov	r24, r6
    17e8:	86 78       	andi	r24, 0x86	; 134
    17ea:	81 f0       	breq	.+32     	; 0x180c <vfprintf+0x382>
    17ec:	61 fe       	sbrs	r6, 1
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <vfprintf+0x36a>
    17f0:	8b e2       	ldi	r24, 0x2B	; 43
    17f2:	01 c0       	rjmp	.+2      	; 0x17f6 <vfprintf+0x36c>
    17f4:	80 e2       	ldi	r24, 0x20	; 32
    17f6:	b7 fc       	sbrc	r11, 7
    17f8:	8d e2       	ldi	r24, 0x2D	; 45
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	b6 01       	movw	r22, r12
    17fe:	4d d0       	rcall	.+154    	; 0x189a <fputc>
    1800:	05 c0       	rjmp	.+10     	; 0x180c <vfprintf+0x382>
    1802:	80 e3       	ldi	r24, 0x30	; 48
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	b6 01       	movw	r22, r12
    1808:	48 d0       	rcall	.+144    	; 0x189a <fputc>
    180a:	ea 94       	dec	r14
    180c:	7e 14       	cp	r7, r14
    180e:	c8 f3       	brcs	.-14     	; 0x1802 <vfprintf+0x378>
    1810:	7a 94       	dec	r7
    1812:	f4 01       	movw	r30, r8
    1814:	e7 0d       	add	r30, r7
    1816:	f1 1d       	adc	r31, r1
    1818:	80 81       	ld	r24, Z
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b6 01       	movw	r22, r12
    181e:	3d d0       	rcall	.+122    	; 0x189a <fputc>
    1820:	77 20       	and	r7, r7
    1822:	b1 f7       	brne	.-20     	; 0x1810 <vfprintf+0x386>
    1824:	05 c0       	rjmp	.+10     	; 0x1830 <vfprintf+0x3a6>
    1826:	80 e2       	ldi	r24, 0x20	; 32
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	b6 01       	movw	r22, r12
    182c:	36 d0       	rcall	.+108    	; 0x189a <fputc>
    182e:	fa 94       	dec	r15
    1830:	ff 20       	and	r15, r15
    1832:	c9 f7       	brne	.-14     	; 0x1826 <vfprintf+0x39c>
    1834:	55 ce       	rjmp	.-854    	; 0x14e0 <vfprintf+0x56>
    1836:	f6 01       	movw	r30, r12
    1838:	26 81       	ldd	r18, Z+6	; 0x06
    183a:	37 81       	ldd	r19, Z+7	; 0x07
    183c:	c9 01       	movw	r24, r18
    183e:	2c 96       	adiw	r28, 0x0c	; 12
    1840:	0f b6       	in	r0, 0x3f	; 63
    1842:	f8 94       	cli
    1844:	de bf       	out	0x3e, r29	; 62
    1846:	0f be       	out	0x3f, r0	; 63
    1848:	cd bf       	out	0x3d, r28	; 61
    184a:	cf 91       	pop	r28
    184c:	df 91       	pop	r29
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	bf 90       	pop	r11
    185c:	af 90       	pop	r10
    185e:	9f 90       	pop	r9
    1860:	8f 90       	pop	r8
    1862:	7f 90       	pop	r7
    1864:	6f 90       	pop	r6
    1866:	5f 90       	pop	r5
    1868:	4f 90       	pop	r4
    186a:	3f 90       	pop	r3
    186c:	08 95       	ret

0000186e <strnlen_P>:
    186e:	fc 01       	movw	r30, r24
    1870:	05 90       	lpm	r0, Z+
    1872:	61 50       	subi	r22, 0x01	; 1
    1874:	70 40       	sbci	r23, 0x00	; 0
    1876:	01 10       	cpse	r0, r1
    1878:	d8 f7       	brcc	.-10     	; 0x1870 <strnlen_P+0x2>
    187a:	80 95       	com	r24
    187c:	90 95       	com	r25
    187e:	8e 0f       	add	r24, r30
    1880:	9f 1f       	adc	r25, r31
    1882:	08 95       	ret

00001884 <strnlen>:
    1884:	fc 01       	movw	r30, r24
    1886:	61 50       	subi	r22, 0x01	; 1
    1888:	70 40       	sbci	r23, 0x00	; 0
    188a:	01 90       	ld	r0, Z+
    188c:	01 10       	cpse	r0, r1
    188e:	d8 f7       	brcc	.-10     	; 0x1886 <strnlen+0x2>
    1890:	80 95       	com	r24
    1892:	90 95       	com	r25
    1894:	8e 0f       	add	r24, r30
    1896:	9f 1f       	adc	r25, r31
    1898:	08 95       	ret

0000189a <fputc>:
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	8c 01       	movw	r16, r24
    18a4:	eb 01       	movw	r28, r22
    18a6:	8b 81       	ldd	r24, Y+3	; 0x03
    18a8:	81 ff       	sbrs	r24, 1
    18aa:	1b c0       	rjmp	.+54     	; 0x18e2 <fputc+0x48>
    18ac:	82 ff       	sbrs	r24, 2
    18ae:	0d c0       	rjmp	.+26     	; 0x18ca <fputc+0x30>
    18b0:	2e 81       	ldd	r18, Y+6	; 0x06
    18b2:	3f 81       	ldd	r19, Y+7	; 0x07
    18b4:	8c 81       	ldd	r24, Y+4	; 0x04
    18b6:	9d 81       	ldd	r25, Y+5	; 0x05
    18b8:	28 17       	cp	r18, r24
    18ba:	39 07       	cpc	r19, r25
    18bc:	64 f4       	brge	.+24     	; 0x18d6 <fputc+0x3c>
    18be:	e8 81       	ld	r30, Y
    18c0:	f9 81       	ldd	r31, Y+1	; 0x01
    18c2:	01 93       	st	Z+, r16
    18c4:	f9 83       	std	Y+1, r31	; 0x01
    18c6:	e8 83       	st	Y, r30
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <fputc+0x3c>
    18ca:	e8 85       	ldd	r30, Y+8	; 0x08
    18cc:	f9 85       	ldd	r31, Y+9	; 0x09
    18ce:	80 2f       	mov	r24, r16
    18d0:	09 95       	icall
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	31 f4       	brne	.+12     	; 0x18e2 <fputc+0x48>
    18d6:	8e 81       	ldd	r24, Y+6	; 0x06
    18d8:	9f 81       	ldd	r25, Y+7	; 0x07
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	9f 83       	std	Y+7, r25	; 0x07
    18de:	8e 83       	std	Y+6, r24	; 0x06
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <fputc+0x4c>
    18e2:	0f ef       	ldi	r16, 0xFF	; 255
    18e4:	1f ef       	ldi	r17, 0xFF	; 255
    18e6:	c8 01       	movw	r24, r16
    18e8:	df 91       	pop	r29
    18ea:	cf 91       	pop	r28
    18ec:	1f 91       	pop	r17
    18ee:	0f 91       	pop	r16
    18f0:	08 95       	ret

000018f2 <__ultoa_invert>:
    18f2:	fa 01       	movw	r30, r20
    18f4:	aa 27       	eor	r26, r26
    18f6:	28 30       	cpi	r18, 0x08	; 8
    18f8:	51 f1       	breq	.+84     	; 0x194e <__ultoa_invert+0x5c>
    18fa:	20 31       	cpi	r18, 0x10	; 16
    18fc:	81 f1       	breq	.+96     	; 0x195e <__ultoa_invert+0x6c>
    18fe:	e8 94       	clt
    1900:	6f 93       	push	r22
    1902:	6e 7f       	andi	r22, 0xFE	; 254
    1904:	6e 5f       	subi	r22, 0xFE	; 254
    1906:	7f 4f       	sbci	r23, 0xFF	; 255
    1908:	8f 4f       	sbci	r24, 0xFF	; 255
    190a:	9f 4f       	sbci	r25, 0xFF	; 255
    190c:	af 4f       	sbci	r26, 0xFF	; 255
    190e:	b1 e0       	ldi	r27, 0x01	; 1
    1910:	3e d0       	rcall	.+124    	; 0x198e <__ultoa_invert+0x9c>
    1912:	b4 e0       	ldi	r27, 0x04	; 4
    1914:	3c d0       	rcall	.+120    	; 0x198e <__ultoa_invert+0x9c>
    1916:	67 0f       	add	r22, r23
    1918:	78 1f       	adc	r23, r24
    191a:	89 1f       	adc	r24, r25
    191c:	9a 1f       	adc	r25, r26
    191e:	a1 1d       	adc	r26, r1
    1920:	68 0f       	add	r22, r24
    1922:	79 1f       	adc	r23, r25
    1924:	8a 1f       	adc	r24, r26
    1926:	91 1d       	adc	r25, r1
    1928:	a1 1d       	adc	r26, r1
    192a:	6a 0f       	add	r22, r26
    192c:	71 1d       	adc	r23, r1
    192e:	81 1d       	adc	r24, r1
    1930:	91 1d       	adc	r25, r1
    1932:	a1 1d       	adc	r26, r1
    1934:	20 d0       	rcall	.+64     	; 0x1976 <__ultoa_invert+0x84>
    1936:	09 f4       	brne	.+2      	; 0x193a <__ultoa_invert+0x48>
    1938:	68 94       	set
    193a:	3f 91       	pop	r19
    193c:	2a e0       	ldi	r18, 0x0A	; 10
    193e:	26 9f       	mul	r18, r22
    1940:	11 24       	eor	r1, r1
    1942:	30 19       	sub	r19, r0
    1944:	30 5d       	subi	r19, 0xD0	; 208
    1946:	31 93       	st	Z+, r19
    1948:	de f6       	brtc	.-74     	; 0x1900 <__ultoa_invert+0xe>
    194a:	cf 01       	movw	r24, r30
    194c:	08 95       	ret
    194e:	46 2f       	mov	r20, r22
    1950:	47 70       	andi	r20, 0x07	; 7
    1952:	40 5d       	subi	r20, 0xD0	; 208
    1954:	41 93       	st	Z+, r20
    1956:	b3 e0       	ldi	r27, 0x03	; 3
    1958:	0f d0       	rcall	.+30     	; 0x1978 <__ultoa_invert+0x86>
    195a:	c9 f7       	brne	.-14     	; 0x194e <__ultoa_invert+0x5c>
    195c:	f6 cf       	rjmp	.-20     	; 0x194a <__ultoa_invert+0x58>
    195e:	46 2f       	mov	r20, r22
    1960:	4f 70       	andi	r20, 0x0F	; 15
    1962:	40 5d       	subi	r20, 0xD0	; 208
    1964:	4a 33       	cpi	r20, 0x3A	; 58
    1966:	18 f0       	brcs	.+6      	; 0x196e <__ultoa_invert+0x7c>
    1968:	49 5d       	subi	r20, 0xD9	; 217
    196a:	31 fd       	sbrc	r19, 1
    196c:	40 52       	subi	r20, 0x20	; 32
    196e:	41 93       	st	Z+, r20
    1970:	02 d0       	rcall	.+4      	; 0x1976 <__ultoa_invert+0x84>
    1972:	a9 f7       	brne	.-22     	; 0x195e <__ultoa_invert+0x6c>
    1974:	ea cf       	rjmp	.-44     	; 0x194a <__ultoa_invert+0x58>
    1976:	b4 e0       	ldi	r27, 0x04	; 4
    1978:	a6 95       	lsr	r26
    197a:	97 95       	ror	r25
    197c:	87 95       	ror	r24
    197e:	77 95       	ror	r23
    1980:	67 95       	ror	r22
    1982:	ba 95       	dec	r27
    1984:	c9 f7       	brne	.-14     	; 0x1978 <__ultoa_invert+0x86>
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	61 05       	cpc	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	08 95       	ret
    198e:	9b 01       	movw	r18, r22
    1990:	ac 01       	movw	r20, r24
    1992:	0a 2e       	mov	r0, r26
    1994:	06 94       	lsr	r0
    1996:	57 95       	ror	r21
    1998:	47 95       	ror	r20
    199a:	37 95       	ror	r19
    199c:	27 95       	ror	r18
    199e:	ba 95       	dec	r27
    19a0:	c9 f7       	brne	.-14     	; 0x1994 <__ultoa_invert+0xa2>
    19a2:	62 0f       	add	r22, r18
    19a4:	73 1f       	adc	r23, r19
    19a6:	84 1f       	adc	r24, r20
    19a8:	95 1f       	adc	r25, r21
    19aa:	a0 1d       	adc	r26, r0
    19ac:	08 95       	ret

000019ae <_exit>:
    19ae:	f8 94       	cli

000019b0 <__stop_program>:
    19b0:	ff cf       	rjmp	.-2      	; 0x19b0 <__stop_program>
